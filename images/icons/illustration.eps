%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 14.0.0
%%For: (1) ()
%%Title: (Gg_ss_users.eps)
%%CreationDate: 8/31/2010 9:00 PM
%%Canvassize: 16383
%%BoundingBox: 0 0 740 740
%%HiResBoundingBox: 0 0 740 740
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%RGBProcessColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 370.5 369.5 370.5 369.5
%AI3_TileBox: -50.96 72.3398 790.96 667.6602
%AI3_DocumentPreview: Header
%AI5_ArtSize: 740 740
%AI5_RulerUnits: 2
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -474.3672 953.3804 0.6667 1183 846 18 1 0 49 118 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:10 10
%AI7_GridSettings: 9 1 9 1 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MO
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
5 Bn
%AI5_BeginGradient: (Blue Radial Gradient)
(Blue Radial Gradient) 1 3 Bd
[
<
0000010102030404050506070809090A0B0C0D0E0F0F101112131415161718191A1B1B1C1D1E1F20
2122232425262728292A2B2C2D2D2E2F30313232333435363738393A3B3C3D3D3E3F404142434445
46464748494A4B4C4D4E4F4F50515253545556
>
<
00000000000000000000000100000000010001010001010101020101020102010202030202030303
03040304040304040404050404050405050505060505060506060706080706070708070808090808
090809090A090A0A0B0A0A0B0A0B0B0D0C0E0D
>
0.000031
0.000031
<
FFFEFDFCFBFAF9F9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDFDEDDDCDBDA
D9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2
B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F
>
<
FFFFFEFEFDFDFDFCFCFBFBFAFAFAF9F9F8F8F7F7F7F6F6F5F5F4F4F4F3F3F2F2F1F1F0F0F0EFEFEE
EEEDEDECECECEBEBEAEAE9E9E9E8E8E7E7E6E6E5E5E5E4E4E3E3E2E2E1E1E1E0E0DFDFDEDEDDDDDD
DCDCDBDBDADAD9D9D8D8D8D7D7D6D6D5D5D4D4
>
<
FFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFD
FDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFBFBFBFBFBFBFBFBFBFB
FBFBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFA
>
4 %_Br
<
5656575757585859595A5A5B5B5B5C5C5D5D5E5F5F6060606162626363636465666667686969696A
6B6B6C6C6D6E6F6F707171717273747475757677787879797A7B7C7C7D7F7F808081828283848585
8586878788898A8A8B8C8D8E8E8F90909091929394949596969898999A9B9C9C9D9D9E9E9FA0A1A1
>
<
0D0D0D0D0F0E0E0E0E0F0F0F0F101010111111101111101212111112121213131214131314141415
151516161617171618171919181A19191B1A1C1B1B1C1C1C1D1D1E1E1E1E1E20201F212022212122
222424232525262627272628282929292A2A2B2B2D2D2D2E2E302F31313332323333353537363838
>
0.000031
0.000031
<
9F9F9E9E9E9D9D9C9C9B9B9A9A9998989797969595949393929191908F8F8E8D8C8C8B8A89898887
8686858483828281807F7E7E7D7C7B7A7A79787776757474737271706F6E6E6D6C6B6A6968676665
6564636261605F5E5D5C5B5A59585757565554535251504F4E4D4C4B4A494847464544434241403F
>
<
D4D4D4D4D3D3D3D3D3D2D2D2D2D1D1D1D0D0D0D0CFCFCFCECECECECDCDCDCCCCCCCBCBCBCACACAC9
C9C9C8C8C8C7C7C7C6C6C5C5C5C4C4C4C3C3C2C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBA
BAB9B9B9B8B8B7B7B6B6B6B5B5B4B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADADACACABABAAAAA9A9
>
<
FAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9
F9F9F9F9F9F9F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F7F7F7F7
F7F7F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F5F5F5F5F5F5F5F5F5F5
>
4 %_Br
[
0.000031 0.000031 0.000031 0.000031 1 1 1 2 50.7937 0 %_BS
%_0.000031 0.000031 0.000031 0.000031 1 1 1 2 50.7937 0 Bs
0.337499 0.052735 0.000031 0.000031 0.623529 0.831373 0.980392 2 57.3913 35.955 %_BS
%_0.337499 0.052735 0.000031 0.000031 0.623529 0.831373 0.980392 2 57.3913 35.955 Bs
0.6318 0.219425 0.000031 0.000031 0.247059 0.662745 0.960784 2 51.0204 100 %_BS
%_0.6318 0.219425 0.000031 0.000031 0.247059 0.662745 0.960784 2 51.0204 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Fade to White)
(Fade to White) 0 2 Bd
[
0.002319
0.000244
0.000031
0.000031
0.992157
0.992157
0.996078
4 %_Br
[
0.002319 0.000244 0.000031 0.000031 0.992157 0.992157 0.996078 2 50 100 %_BS
%_0.002319 0.000244 0.000031 0.000031 0.992157 0.992157 0.996078 2 50 100 Bs
0.002319 0.000244 0.000031 0.000031 0.992157 0.992157 0.996078 2 75 0 %_BS
%_0.002319 0.000244 0.000031 0.000031 0.992157 0.992157 0.996078 2 75 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Green Gradient)
(Green Gradient) 0 6 Bd
[
<
B4B3B3B3B2B2B1B1B0AFAFAEAEADACACABABAAAAAAA9A8A8A7A7A6A5A5A4A3A3A2A2A19F9F9E9D9C
9B9A99989796969594939291908F8F8D
>
<
3938373635343331302F2E2D2C2B2A29282725242322211F1E1C1B1A1716141312100F0D0C0A0907
06040302010000000000000000000000
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFEFDFBFAF9F7F6
>
<
100F0E0D0D0C0B0A0A09080707060605050404040303020202020101010101000000000000000000
00000000000000000000000000000000
>
<
5859595A5A5B5C5C5D5E5E5F5F606161626363646465666667676869696A6B6B6C6C6D6E6E6F6F70
7171727373747475767677787879797A
>
<
9192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACAEAFB0B1B2B3B4B5B6B7B8B9
BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9
>
<
303031313132323233333334343435353636363737373838383939393A3A3A3B3B3B3C3C3C3D3D3D
3E3E3F3F3F4040404141414242424343
>
4 %_Br
<
A5A6A6A7A8A8A8A9AAAAAAABACACADADAEAFAFB0B1B1B2B2B3B3B3B4
>
<
181A1B1C1E1F20222324252627292B2C2D2E2F303133343536373839
>
1
<
010101020202020303040404050506070708090A0A0B0C0D0D0E0F10
>
<
696868676666656564636362616160605F5E5E5D5C5C5B5B5A595958
>
<
ADACABAAA9A8A7A6A5A4A3A2A1A09E9D9C9B9A999897969594939291
>
<
3A3A3939393838373737363636353534343433333332323131313030
>
4 %_Br
<
2425262728292A2A2B2C2D2E2E2F3032323334353536373838393A3B3C3D3E3E3F40414142444545
46474748494A4A4B4C4C4D4E4E50515252545555565757585A5A5B5C5C5D5E5E5F60606162626364
646667676868696A6B6C6D6D6E6E6F7070717272737374757577777878797A7A7B7B7C7C7E7F7F80
808181828284858586868787888889898A8B8B8C8D8D8E8E8F8F9090919193939394949595969698
989899999A9A9B9B9B9C9C9C9D9D9F9F9FA0A0A0A1A1A1A2A2A2A3A3A3A3A3A3A3A3A4A4A4A4A4A5
A5A5A5
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000100000101020101020102020102020302020302030302
04030304030504040504040504040505060505060505060505060606070706080707080808090908
0909090A0A090A0A0A0B0B0B0C0C0B0B0C0C0C0D0D0D0E0E0D0D0E0E0E0E0F0F0F11111010121211
11131312121413131314141414141515151515161616161617171717171718181818171717191918
181818
>
<
3F40414344454648494A4C4D4E4F515253545657585A5B5B5C5D5E60616264656668696A6B6D6E70
6F717274757778797B7D7E7E80818385868889898B8D8E8F91929493959698999A9C9C9D9FA0A1A3
A2A4A5A6A8A8A9ABACADADAEB0B2B3B3B4B6B7B8B9BABBBDBDBEBFC1C1C2C4C5C5C6C7C8C8CACBCB
CCCECECFD0D2D2D3D4D4D6D7D7D8DADADBDCDDDEDFDFE0E0E2E3E4E5E5E7E9E9EAEBECEEEEF0F0F2
F2F4F4F6F8F8FAFAFCFCFDFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000001010101010101010101010101010101
010101
>
<
DBDAD9D9D8D7D6D6D5D4D3D2D2D1D0CFCFCECDCCCCCBCAC9C9C8C7C6C6C5C4C4C3C2C1C1C0BFBEBE
BDBCBCBBBAB9B9B8B7B7B6B5B5B4B3B2B2B1B0B0AFAEAEADACACABAAAAA9A8A8A7A6A6A5A4A4A3A2
A2A1A0A09F9F9E9D9D9C9B9B9A9A999898979696959594939392929191908F8F8E8E8D8D8C8B8B8A
8A898988888786868585848483838282818180807F7F7E7E7D7D7C7C7B7B7A7A7A79797878777776
76767575747473737372727271717070706F6F6F6E6E6E6D6D6D6C6C6C6C6B6B6B6B6A6A6A6A6A69
696969
>
<
F0F0EFEFEEEEEDEDECECEBEBEBEAEAE9E9E8E8E7E7E7E6E6E5E5E4E4E3E3E3E2E2E1E1E0E0E0DFDF
DEDEDEDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCF
CECECECDCDCCCCCCCBCBCBCACACAC9C9C8C8C8C7C7C7C6C6C6C5C5C5C4C4C4C3C3C3C2C2C2C1C1C1
C0C0C0BFBFBFBEBEBEBDBDBDBCBCBCBCBBBBBBBABABAB9B9B9B9B8B8B8B8B7B7B7B6B6B6B6B5B5B5
B5B4B4B4B4B3B3B3B3B2B2B2B2B2B1B1B1B1B1B0B0B0B0B0AFAFAFAFAFAFAEAEAEAEAEAEAEADADAD
ADADAD
>
<
CCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6
A6A5A4A3A2A1A09F9E9D9C9C9B9A99989796959594939291908F8E8E8D8C8B8A8988888786858483
838281807F7F7E7D7C7B7B7A797877777675747373727170706F6E6D6D6C6B6A6A69686767666565
646363626160605F5E5E5D5C5C5B5A5A595858575656555554535352525150504F4F4E4D4D4C4C4B
4B4A4A4948484747464645454444434343424241414040403F3F3E3E3E3D3D3D3C3C3C3B3B3B3B3A
3A3A3A
>
4 %_Br
<
8D8C8C8B8A8989888787868585848383828181817F7E7E7D7C7B7B7A797978777776747373727171
706F6F6E6D6D6C6B6A6A696868676666656464636161605F5F5E5D5C5B5A5A595858565555545353
525151504F4F4E4D4D4C4C4B4A4A49484746454544444342424140403F3E3D3C3C3B3A3A39393837
37363635343433333231312F2F2E2E2D2D2C2B2B2A2A29292828272626252424
>
0.000031
<
F6F5F3F1EFEEECEBE9E7E7E5E4E3E2E1E0DFDEDDDBDAD9D8D6D5D4D3D1D0CFCECCCBCAC8C7C6C5C3
C2C1C0C0BFBDBCBBBAB8B7B6B5B3B2B1AFAEADABAAA9A7A6A4A3A2A1A09E9D9B9A98979594929190
8E8D8D8B8A898786858382817F7E7E7C7B7978777574727171706E6D6B6A69676766646361615F5F
5E5D5C5A595958575554535351504F4D4D4C4B4A49484745464443414140403F
>
0.000031
<
7A7B7B7C7D7E7E7F80808182838384858586878788898A8A8B8C8C8D8E8E8F909091929393949595
9697979899999A9B9C9C9D9E9E9FA0A0A1A2A2A3A4A4A5A6A6A7A8A8A9AAAAABACACADAEAEAFB0B0
B1B2B2B3B4B4B5B6B6B7B7B8B9B9BABBBBBCBDBDBEBEBFC0C0C1C2C2C3C3C4C5C5C6C7C7C8C8C9CA
CACBCBCCCDCDCECECFD0D0D1D1D2D2D3D3D4D5D5D6D6D7D7D8D8D9D9DADADBDB
>
<
C9C9CACACACACBCBCBCCCCCCCCCDCDCDCECECECECFCFCFD0D0D0D0D1D1D1D1D2D2D2D3D3D3D3D4D4
D4D5D5D5D5D6D6D6D6D7D7D7D8D8D8D8D9D9D9D9DADADADBDBDBDBDCDCDCDCDDDDDDDEDEDEDEDFDF
DFDFE0E0E0E0E1E1E1E1E2E2E2E2E3E3E3E4E4E4E4E5E5E5E5E6E6E6E6E7E7E7E7E8E8E8E8E9E9E9
E9E9EAEAEAEAEBEBEBEBECECECECEDEDEDEDEDEEEEEEEEEEEFEFEFEFEFF0F0F0
>
<
434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A
6B6C6D6D6E6F707172737475767778797A7B7C7D7E7F80818283848485868788898A8B8C8D8E8F90
919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A6A7A8A9AAABACADADAEAFB0B1B2B3B3
B4B5B6B7B8B8B9BABBBCBDBDBEBFC0C1C1C2C3C4C4C5C6C7C7C8C9CACACBCBCC
>
4 %_Br
<
0F101011121313141515161717191A1A1C1D1E1E1F20202122222324242526272829292A2B2B2C2D
2D2E2F2F31313233333435353637373838393A3A3B3C3C3D3D3E4040414142434344444546464748
494A4A4B4B4C4C4D4E4E4F4F505051525253535454555556585859595A5A5B5B5C5D5E5E5F5F6061
616262646465656666676768686869696A6A6B6B6C6C6D6D6E6E6F6F707070717172727373737474
767677777778787979797A7A7B7B7B7C7C7D7D7E7E7E7E7F7F818181818181828283838383848484
858585858686868787878788888888898989898A8A8A8A8A8B8B8B8B8B8C8C8C8C8C8C8C8D8D8D8D
8D8D
>
0.000031
<
1A1C1D1E20212224252628292A2C2D2E303133343537383A3B3B3C3D3F404243444647484A4B4C4D
4F4F50515354555758595A5C5C5D5E5F60626364646667696A6B6D6E6E7071727475777778797B7C
7E7E7F81828383858687898A8A8B8D8E8E9091929494959798989A9B9D9E9EA0A1A2A3A4A6A6A7A8
AAAAABADAEAEAFB1B1B2B3B3B5B6B6B7B8B9BABBBCBCBDBDBFC0C0C1C2C2C3C5C5C6C7C7C8C8CACB
CBCCCCCECFCFD0D0D1D1D3D4D4D5D5D6D6D8D8D9D9DADADBDBDDDDDEDEDFDFE0E0E1E1E2E2E3E3E4
E4E5E5E5E7E7E7E7E7E9E9EAEBEBECECECEDEEEEEFEFEFEFF1F1F1F3F3F3F3F3F5F5F5F5F5F6F6F6
F6F6
>
0.000031
<
EEEDEDECEBEAEAE9E8E8E7E6E6E5E4E4E3E2E1E1E0DFDFDEDDDDDCDBDBDAD9D9D8D7D7D6D5D5D4D3
D3D2D1D1D0D0CFCECECDCCCCCBCACAC9C9C8C7C7C6C5C5C4C4C3C2C2C1C1C0BFBFBEBEBDBCBCBBBB
BAB9B9B8B8B7B7B6B5B5B4B4B3B3B2B1B1B0B0AFAFAEAEADACACABABAAAAA9A9A8A8A7A7A6A6A5A5
A4A3A3A2A2A1A1A0A09F9F9E9E9E9D9D9C9C9B9B9A9A999998989797969696959594949393939292
91919090908F8F8E8E8E8D8D8C8C8C8B8B8A8A8A8989898888878787868686858585848484838383
83828282818181808080807F7F7F7F7E7E7E7E7D7D7D7D7D7C7C7C7C7C7B7B7B7B7B7B7B7A7A7A7A
7A7A
>
<
F8F8F7F7F7F7F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F2F1F1F1F0F0F0F0EFEFEFEFEEEEEEEDED
EDEDECECECECEBEBEBEBEAEAEAEAE9E9E9E9E8E8E8E8E7E7E7E7E6E6E6E6E5E5E5E5E4E4E4E4E3E3
E3E3E2E2E2E2E2E1E1E1E1E0E0E0E0DFDFDFDFDFDEDEDEDEDDDDDDDDDDDCDCDCDCDBDBDBDBDBDADA
DADADAD9D9D9D9D9D8D8D8D8D8D7D7D7D7D7D6D6D6D6D6D5D5D5D5D5D5D4D4D4D4D4D3D3D3D3D3D3
D2D2D2D2D2D2D1D1D1D1D1D1D0D0D0D0D0D0CFCFCFCFCFCFCFCECECECECECECECDCDCDCDCDCDCDCD
CCCCCCCCCCCCCCCCCCCBCBCBCBCBCBCBCBCBCACACACACACACACACACACACAC9C9C9C9C9C9C9C9C9C9
C9C9
>
<
E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCFCECDCCCBCAC9C8C7C6C5C4C3C2C1
C0C0BFBEBDBCBBBAB9B8B7B6B6B5B4B3B2B1B0AFAFAEADACABAAA9A8A8A7A6A5A4A3A2A2A1A09F9E
9D9D9C9B9A999998979695949493929191908F8E8D8D8C8B8A8A898887868685848483828181807F
7E7E7D7C7B7B7A7979787777767575747372727170706F6F6E6D6D6C6B6B6A696968676766666564
64636362616160605F5F5E5D5D5C5C5B5B5A5A59595858575756565555545453535252515150504F
4F4F4E4E4D4D4D4C4C4B4B4B4A4A4949494848484747474746464645454545454444444444434343
4343
>
4 %_Br
[
0.55407 0.000031 0.965515 0.000031 0.478431 0.788235 0.262745 2 22.7273 100 %_BS
%_0.55407 0.000031 0.965515 0.000031 0.478431 0.788235 0.262745 2 22.7273 100 Bs
0.705653 0.222751 1 0.063722 0.345098 0.568627 0.188235 2 50 93.2584 %_BS
%_0.705653 0.222751 1 0.063722 0.345098 0.568627 0.188235 2 50 93.2584 Bs
0.647303 0.095888 1 0.003754 0.411765 0.678431 0.227451 2 50 62.3595 %_BS
%_0.647303 0.095888 1 0.003754 0.411765 0.678431 0.227451 2 50 62.3595 Bs
0.142428 0.000031 0.246067 0.000031 0.858824 0.941176 0.8 2 39.3939 34.8315 %_BS
%_0.142428 0.000031 0.246067 0.000031 0.858824 0.941176 0.8 2 39.3939 34.8315 Bs
0.55407 0.000031 0.965515 0.000031 0.478431 0.788235 0.262745 2 46.5116 10.6742 %_BS
%_0.55407 0.000031 0.965515 0.000031 0.478431 0.788235 0.262745 2 46.5116 10.6742 Bs
0.057465 0.000031 0.103578 0.000031 0.933333 0.972549 0.905882 2 37.5 2.24719 %_BS
%_0.057465 0.000031 0.103578 0.000031 0.933333 0.972549 0.905882 2 37.5 2.24719 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Linear Gradient)
(Linear Gradient) 0 2 Bd
[
<
00000001020304050506070809090A0B0C0D0F101112131415161718191A1B1C1C1D1E1F20212324
252627292A2B2C2D2E2F3031333435363738393B3C3D3E3F40414344454647484A4B4C4D4E4F5052
5354555657595A5B5D5E6061626364656768696A6B6C6D6E6F70707172737475767778797A7B7C7D
7E7F808182828384848586878889898A8B8C8D8E8F8F909192929394959596979898999A9B9B9C9C
9D9E9E9F9FA0A0A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABABACACADADAEAEAEAFAFB0
B0B0B1B1B1B1B2B2B2B3B3B3B4B4B4B5B5B5B6B6B6B7B7B7B8B8B8B9B9B9B9B9BABABABABABBBBBB
BCBCBCBCBDBDBDBDBEBEBEBEBFBFBFBF
>
<
00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141415161718191A1B1B
1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343535363738393A3B3C3D3E3F4041
424344454647484A4B4C4D4E4F505153535455565758595A5B5B5C5D5E5F60616162636465666768
696A6A6B6C6C6D6E6F6F70717273747576777778797A7A7B7C7D7E7E7F8081818283838485868687
8889898A8B8B8C8D8D8E8F8F90909192929394959596979797989899999A9A9B9B9C9C9D9D9E9E9F
9FA0A0A1A1A1A2A2A3A3A3A4A4A4A5A5A6A6A6A7A7A7A8A8A8A9A9A9AAAAAAAAAAABABABABABABAB
ACACACACACACACACADADADADADADADAD
>
<
00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141516171718191A1B1C1C
1D1E1F20212122232425262829292A2B2C2D2E2F30313233343536373838393A3B3C3D3E3F404142
4344454647484A4B4C4E4F50515253545555565758595A5B5C5D5D5E5F6061626364646566676768
696A6A6B6C6C6D6E6F6F707172727374757576777878797A7B7B7C7D7E7F7F808181828384848585
8687878888898A8B8B8C8D8E8E8F8F909091919192929393949595969697979899999A9A9B9B9C9D
9D9D9E9E9E9F9FA0A0A0A1A1A2A2A2A3A3A3A4A4A4A5A5A5A5A5A6A6A6A6A6A7A7A7A7A7A7A8A8A8
A8A8A9A9A9A9A9AAAAAAAAAAAAABABAB
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000101010101010202020203030303040405050606070708090A0A0B0C
0D0E0F10101112131415161718191A1B1C1D1E202122242527282A2B2C2E2F313233353638393B3D
3E4041434546484A4C4D4F51535456585A5C5D5F61636567696B6D6F71737577797C7E8083858789
8C8E90939597999C9EA0A2A4A6A9ABADAFB1B3B5B7B9BBBDBEC0C2C4C6C7C9CACBCCCDCED0D1D3D4
D5D7D8D9DADBDCDDDEDFE0E2E3E4E5E6
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
4 %_Br
[
0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 %_BS
%_0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 Bs
0.000031 0.000031 0.000031 0.000031 1 1 1 2 50 0 %_BS
%_0.000031 0.000031 0.000031 0.000031 1 1 1 2 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Soft Black Vignette)
(Soft Black Vignette) 1 3 Bd
[
0.75021
0.679683
0.670222
0.90164
0
0
0
4 %_Br
0.75021
0.679683
0.670222
0.90164
0
0
0
4 %_Br
[
0.75021 0.679683 0.670222 0.90164 0 0 0 2 68.3944 73.8792 %_BS
%_0.75021 0.679683 0.670222 0.90164 0 0 0 2 68.3944 73.8792 Bs
0.75021 0.679683 0.670222 0.90164 0 0 0 2 31.8603 88.7329 %_BS
%_0.75021 0.679683 0.670222 0.90164 0 0 0 2 31.8603 88.7329 Bs
0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 %_BS
%_0.75021 0.679683 0.670222 0.90164 0 0 0 2 50 100 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Squares Angled)
(Squares Angled) 11.4478 11.4473 66.9478 66.9473 [
%AI3_Tile
(0 O 0 R 0.955047 0.739834 0.445289 0.380316 0.082353 0.219608 0.317647 Xa
 0.955047 0.739834 0.445289 0.380316 0.082353 0.219608 0.317647 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
16.9985 5.8984 m
16.9985 16.998 L
5.8989 16.998 L
5.8989 5.8984 L
16.9985 5.8984 L
f
28.1001 28.0977 m
28.1001 39.1982 L
16.9985 39.1982 L
16.9985 28.0977 L
28.1001 28.0977 L
f
39.1978 50.2969 m
39.1978 61.3975 L
28.1001 61.3975 L
28.1001 50.2969 L
39.1978 50.2969 L
f
16.9985 61.3975 m
16.9985 72.4971 L
5.9009 72.4971 L
5.9009 61.3975 L
16.9985 61.3975 L
f
72.4966 5.8984 m
72.4966 16.998 L
61.397 16.998 L
61.397 5.8984 L
72.4966 5.8984 L
f
50.2974 16.998 m
50.2974 28.0977 L
39.1978 28.0977 L
39.1978 16.998 L
50.2974 16.998 L
f
61.3989 39.1982 m
61.3989 50.2979 L
50.2974 50.2979 L
50.2974 39.1982 L
61.3989 39.1982 L
f
72.4985 61.3975 m
72.4985 72.4971 L
61.3989 72.4971 L
61.3989 61.3975 L
72.4985 61.3975 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.851347 0.519371 0.150301 0.009277 0.164706 0.443137 0.643137 Xa
 0.851347 0.519371 0.150301 0.009277 0.164706 0.443137 0.643137 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.7 w 4 M []0 d0 XR
39.1978 5.8984 m
39.1978 28.0977 L
16.9985 28.0977 L
16.9985 5.8984 L
39.1978 5.8984 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.175174 0.015015 0.000031 0.000031 0.803922 0.913725 0.988235 Xa
 0.175174 0.015015 0.000031 0.000031 0.803922 0.913725 0.988235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.7 w 4 M []0 d0 XR
39.1978 5.8984 m
39.1978 28.0977 L
16.9985 28.0977 L
16.9985 5.8984 L
39.1978 5.8984 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.55407 0.000031 0.965515 0.000031 0.478431 0.788235 0.262745 Xa
 0.55407 0.000031 0.965515 0.000031 0.478431 0.788235 0.262745 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.7 w 4 M []0 d0 XR
50.2974 28.0977 m
50.2974 50.2979 L
28.1001 50.2979 L
28.1001 28.0977 L
50.2974 28.0977 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.175174 0.015015 0.000031 0.000031 0.803922 0.913725 0.988235 Xa
 0.175174 0.015015 0.000031 0.000031 0.803922 0.913725 0.988235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.7 w 4 M []0 d0 XR
50.2974 28.0977 m
50.2974 50.2979 L
28.1001 50.2979 L
28.1001 28.0977 L
50.2974 28.0977 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6318 0.219425 0.000031 0.000031 0.247059 0.662745 0.960784 Xa
 0.6318 0.219425 0.000031 0.000031 0.247059 0.662745 0.960784 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.7 w 4 M []0 d0 XR
61.3989 50.2969 m
61.3989 72.4971 L
39.1978 72.4971 L
39.1978 50.2969 L
61.3989 50.2969 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.175174 0.015015 0.000031 0.000031 0.803922 0.913725 0.988235 Xa
 0.175174 0.015015 0.000031 0.000031 0.803922 0.913725 0.988235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.7 w 4 M []0 d0 XR
61.3989 50.2969 m
61.3989 72.4971 L
39.1978 72.4971 L
39.1978 50.2969 L
61.3989 50.2969 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.728817 0.275395 1 0.122774 0.309804 0.513726 0.172549 Xa
 0.728817 0.275395 1 0.122774 0.309804 0.513726 0.172549 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.7 w 4 M []0 d0 XR
16.9985 16.998 m
16.9985 39.1982 L
0.3501 39.1982 L
0.3501 16.998 L
16.9985 16.998 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.175174 0.015015 0.000031 0.000031 0.803922 0.913725 0.988235 Xa
 0.175174 0.015015 0.000031 0.000031 0.803922 0.913725 0.988235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.7 w 4 M []0 d0 XR
16.9985 16.998 m
16.9985 39.1982 L
0.3501 39.1982 L
0.3501 16.998 L
16.9985 16.998 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.851347 0.519371 0.150301 0.009277 0.164706 0.443137 0.643137 Xa
 0.851347 0.519371 0.150301 0.009277 0.164706 0.443137 0.643137 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.7 w 4 M []0 d0 XR
39.1978 61.3975 m
39.1978 78.0469 L
16.9985 78.0469 L
16.9985 61.3975 L
39.1978 61.3975 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.175174 0.015015 0.000031 0.000031 0.803922 0.913725 0.988235 Xa
 0.175174 0.015015 0.000031 0.000031 0.803922 0.913725 0.988235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.7 w 4 M []0 d0 XR
39.1978 61.3975 m
39.1978 78.0469 L
16.9985 78.0469 L
16.9985 61.3975 L
39.1978 61.3975 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6318 0.219425 0.000031 0.000031 0.247059 0.662745 0.960784 Xa
 0.6318 0.219425 0.000031 0.000031 0.247059 0.662745 0.960784 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.7 w 4 M []0 d0 XR
61.397 0.3496 m
61.397 16.998 L
39.1978 16.998 L
39.1978 0.3496 L
61.397 0.3496 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.175174 0.015015 0.000031 0.000031 0.803922 0.913725 0.988235 Xa
 0.175174 0.015015 0.000031 0.000031 0.803922 0.913725 0.988235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.7 w 4 M []0 d0 XR
61.397 0.3496 m
61.397 16.998 L
39.1978 16.998 L
39.1978 0.3496 L
61.397 0.3496 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.728817 0.275395 1 0.122774 0.309804 0.513726 0.172549 Xa
 0.728817 0.275395 1 0.122774 0.309804 0.513726 0.172549 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.7 w 4 M []0 d0 XR
72.4966 16.998 m
72.4966 39.1982 L
50.2974 39.1982 L
50.2974 16.998 L
72.4966 16.998 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.175174 0.015015 0.000031 0.000031 0.803922 0.913725 0.988235 Xa
 0.175174 0.015015 0.000031 0.000031 0.803922 0.913725 0.988235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.7 w 4 M []0 d0 XR
72.4966 16.998 m
72.4966 39.1982 L
50.2974 39.1982 L
50.2974 16.998 L
72.4966 16.998 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.403632 0.000031 0.698573 0.000031 0.623529 0.847059 0.470588 Xa
 0.403632 0.000031 0.698573 0.000031 0.623529 0.847059 0.470588 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.7 w 4 M []0 d0 XR
78.0474 39.1982 m
78.0474 61.3984 L
61.3989 61.3984 L
61.3989 39.1982 L
78.0474 39.1982 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.175174 0.015015 0.000031 0.000031 0.803922 0.913725 0.988235 Xa
 0.175174 0.015015 0.000031 0.000031 0.803922 0.913725 0.988235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.7 w 4 M []0 d0 XR
78.0474 39.1982 m
78.0474 61.3984 L
61.3989 61.3984 L
61.3989 39.1982 L
78.0474 39.1982 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.403632 0.000031 0.698573 0.000031 0.623529 0.847059 0.470588 Xa
 0.403632 0.000031 0.698573 0.000031 0.623529 0.847059 0.470588 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.7 w 4 M []0 d0 XR
28.1001 39.1982 m
28.1001 61.3984 L
5.8989 61.3984 L
5.8989 39.1982 L
28.1001 39.1982 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.175174 0.015015 0.000031 0.000031 0.803922 0.913725 0.988235 Xa
 0.175174 0.015015 0.000031 0.000031 0.803922 0.913725 0.988235 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.7 w 4 M []0 d0 XR
28.1001 39.1982 m
28.1001 61.3984 L
5.8989 61.3984 L
5.8989 39.1982 L
28.1001 39.1982 L
s
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(Unnamed 20)0 A
u
u
0 J 0 j 1 w 4 M []0 d0 XR
-3948.5 4688.4351 m
-3734.8999 4688.4351 L
-3734.8999 4680.6343 L
-3948.5 4680.6343 L
-3948.5 4688.4351 L
n
0 O
0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa
-3948.5 4684.5352 m
-3938.4856 4687.0269 -3931.6863 4688.375 -3919.7007 4688.4351 c
-3906.7185 4688.5 -3841.6997 4688.4351 y
-3776.6816 4688.5 -3763.6997 4688.4351 v
-3751.7124 4688.375 -3744.9136 4687.0269 -3734.8999 4684.5352 C
-3744.9136 4682.0435 -3751.7124 4680.6953 -3763.6997 4680.6343 c
-3776.6816 4680.5688 -3841.6997 4680.6343 y
-3906.7185 4680.5688 -3919.7007 4680.6343 v
-3931.6863 4680.6953 -3938.4856 4682.0435 -3948.5 4684.5352 C
f
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 2)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-7820.8833 8560.9551 m
-7729.0479 8560.9551 L
-7729.0479 8556.6758 L
-7820.8833 8556.6758 L
-7820.8833 8560.9551 L
n
0 O
0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 Xa
-7820.6631 8558.2754 m
-7821 8558.3418 -7820.4814 8558.5313 -7820.8833 8558.3887 C
-7820.8379 8558.2705 -7820.7725 8558.1816 -7820.6631 8558.2754 C
f
-7730.1675 8558.4414 m
-7731.2524 8559.2041 -7732.6816 8558.4336 -7733.8701 8558.9199 C
-7734.0098 8558.9521 -7733.8345 8558.502 -7734.1484 8558.6025 C
-7735.3008 8559.1953 -7737.1162 8558.8418 -7738.5195 8558.3848 C
-7738.4346 8558.2666 L
-7738.7017 8558.1816 -7739.0283 8558.5723 -7739.3115 8558.5176 C
-7739.3135 8558.4395 -7739.2207 8558.4063 -7739.2861 8558.2979 C
-7739.3574 8558.5352 -7739.7983 8558.4082 -7739.9185 8558.584 C
-7740.0303 8558.4922 -7740.0195 8558.3047 -7740.1641 8558.2002 C
-7740.3262 8558.4697 L
-7740.7769 8559.1094 -7741.4209 8558.4258 -7742.0361 8558.7559 C
-7742.0063 8558.6934 -7741.9453 8558.6445 -7741.9941 8558.584 C
-7742.9814 8558.9727 -7744.2168 8558.8994 -7745.3208 8559.043 C
-7745.2769 8558.9482 -7745.2363 8558.7754 -7745.3008 8558.668 C
-7745.3555 8558.9512 -7745.6963 8559.0225 -7745.9922 8559.0781 C
-7746.1255 8558.7871 -7746.4995 8559.3438 -7746.8467 8559.1826 C
-7746.8169 8559.1191 L
-7747.0732 8559.4238 -7747.1973 8558.9434 -7747.4053 8559.3086 C
-7747.5684 8559.0801 L
-7747.6807 8559.4902 -7747.9395 8558.8672 -7748.1514 8559.0762 C
-7748.1445 8559.1602 L
-7748.3442 8559.2598 -7748.4482 8559.0537 -7748.6338 8559.123 C
-7748.6514 8559.0762 L
-7749.0854 8559.1826 -7749.3379 8558.9551 -7749.3271 8559.2754 C
-7749.4795 8559.0186 -7748.9063 8559.1582 -7749.1455 8558.7842 C
-7750.5732 8559.1152 -7752.0459 8559.0498 -7753.4834 8559.0566 C
-7753.6465 8558.9277 -7753.7505 8558.8887 -7753.7871 8558.7666 C
-7753.9307 8558.832 -7754.3281 8558.8262 -7754.4585 8558.9902 C
-7754.4102 8558.9834 -7754.5513 8558.8262 -7754.6274 8558.8105 C
-7754.8887 8558.6895 -7754.9131 8559.1621 -7755.2002 8559.0186 C
-7755.0859 8558.9336 -7755.0469 8558.8301 -7755.0854 8558.7109 C
-7755.3301 8558.9609 -7755.6577 8558.9209 -7755.9473 8559.002 C
-7755.9023 8558.9482 -7755.8325 8558.916 -7755.8433 8558.8154 C
-7756.1602 8559.0986 -7756.4209 8558.7559 -7756.6982 8558.9346 C
-7756.5947 8558.75 L
-7757.0415 8558.5254 -7756.7266 8559.1367 -7757.1128 8559.0039 C
-7757.02 8558.9453 -7757.0527 8558.873 -7757.0361 8558.7979 C
-7757.3965 8559.1338 -7757.9795 8559.0225 -7758.3389 8559.1367 C
-7758.3174 8559.1113 -7758.3232 8559.0605 Y
-7758.7148 8559.1025 -7759.1245 8558.998 -7759.5552 8559.1445 C
-7759.7119 8559.0625 -7759.5039 8558.6934 -7759.9185 8558.7617 C
-7759.9033 8559.1328 -7760.6221 8558.9141 -7760.3779 8559.334 C
-7760.7319 8559.2734 -7761.2925 8559.1338 -7761.5283 8559.2598 C
-7761.3691 8559.1191 -7761.7007 8558.8066 -7761.4063 8558.7754 C
-7761.6289 8558.5498 L
-7761.5957 8558.3984 -7761.3999 8558.6016 -7761.4707 8558.4102 C
-7761.6182 8558.4258 -7762.0479 8558.5723 -7762.1797 8558.5117 C
-7762.4531 8558.7393 -7762.7041 8559.1641 -7763.1465 8559.2109 C
-7762.9385 8559.0664 -7763.2646 8558.8018 -7763.1235 8558.7383 C
-7763.7407 8559.4482 L
-7763.8877 8559.4658 -7763.7725 8559.1563 -7763.9854 8559.2529 C
-7763.9746 8559.3506 -7764.0674 8559.4121 -7764.1318 8559.4922 C
-7764.1875 8559.4482 -7764.7441 8559.584 -7764.8081 8559.2178 C
-7764.8735 8559.0762 -7764.5684 8559.1426 -7764.7314 8559.0117 C
-7765.0029 8559.0146 -7765.0151 8559.1406 -7765.2871 8559.1465 C
-7765.2925 8559.0977 L
-7765.4717 8559.043 -7765.8213 8559.2529 -7765.6265 8559.4551 C
-7765.5015 8559.4658 -7765.6738 8559.2354 -7765.4888 8559.3418 C
-7765.6152 8559.5537 -7765.9312 8559.6133 -7766.2031 8559.6162 C
-7766.1104 8559.5586 -7766.1216 8559.4609 -7766.0845 8559.3574 C
-7766.4497 8559.6445 -7766.8369 8559.7354 -7767.2451 8559.8555 C
-7767.2515 8560.0293 -7767.0928 8559.5391 -7767.0327 8559.6309 C
-7767.5557 8559.3896 -7768.1128 8559.9727 -7768.5479 8559.6201 C
-7768.4766 8559.5898 -7768.5098 8559.8672 -7768.5146 8559.8184 C
-7768.7666 8559.7969 -7768.7549 8559.5449 -7768.9189 8559.6377 C
-7768.9355 8559.4902 -7769.1255 8559.6855 -7769.2944 8559.7305 C
-7769.3818 8559.8369 -7769.3384 8559.6582 -7769.1914 8559.6426 C
-7769.4268 8559.7666 -7770.3691 8559.9941 -7770.9131 8559.7793 C
-7770.9023 8559.877 -7771.2471 8560.1377 -7771.3721 8560.127 C
-7771.3232 8559.8984 L
-7771.4375 8559.7617 -7771.7422 8559.918 -7771.7632 8559.7227 C
-7772.0303 8560 -7770.7344 8559.4863 -7771.0957 8559.7002 C
-7771.1895 8559.5098 -7771.5991 8560.0645 -7771.5215 8559.7529 C
-7771.7725 8559.7617 -7772.0161 8560.0186 -7772.2559 8559.8047 C
-7772.1865 8559.8418 -7772.0522 8559.4873 -7772.2549 8559.5039 C
-7772.6123 8559.5449 -7772.3564 8559.6133 -7772.6465 8559.6895 C
-7772.8281 8559.7832 L
-7772.8398 8560.0059 -7773.1475 8559.7529 -7773.0146 8560.002 C
-7773.0586 8559.8184 -7773.5337 8560.1152 -7773.4971 8559.7461 C
-7773.4473 8559.4551 L
-7773.6016 8559.4766 -7773.7002 8559.7617 -7773.8213 8559.8896 C
-7773.8418 8559.8633 -7773.8823 8559.8047 -7773.8745 8559.7578 C
-7773.8994 8560.2031 -7774.2432 8559.7207 -7774.4268 8560.0645 C
-7774.7505 8559.9102 -7775.2495 8560.0498 -7775.4023 8559.7734 C
-7775.6514 8559.9082 -7775.8784 8560.0674 -7776.1621 8559.9727 C
-7776.1055 8559.9307 -7776.0283 8559.918 -7776.0122 8559.8223 C
-7776.1904 8559.6914 -7776.2344 8559.8086 -7776.3975 8559.8809 C
-7776.3608 8559.8145 -7776.7539 8559.6201 -7776.9521 8559.4629 C
-7777.1992 8559.5957 -7777.1143 8559.8359 -7777.1392 8559.9824 C
-7777.3652 8559.543 -7777.8379 8560.2656 -7778.1211 8559.8672 C
-7778.0352 8559.8066 -7777.7598 8559.6514 -7777.9658 8559.541 C
-7778.1919 8559.1025 -7778.4219 8559.8643 -7778.7861 8559.6543 C
-7778.6968 8560.0186 L
-7778.8594 8559.793 -7779.2334 8560.2305 -7779.1963 8559.8594 C
-7779.3184 8559.9902 -7779.6265 8559.7383 -7779.5859 8560.0938 C
-7780.1846 8559.793 -7781.0425 8560.2754 -7781.4102 8559.6377 C
-7781.4961 8559.6973 -7781.7104 8559.6367 -7781.6665 8559.8193 C
-7781.5239 8560.0176 -7781.4673 8559.6777 -7781.4141 8559.8125 C
-7781.4912 8559.8232 -7781.5078 8559.9209 -7781.5161 8559.9697 C
-7781.7021 8559.8887 -7781.8486 8559.8633 -7781.6729 8559.5674 C
-7782.0869 8559.3477 -7782.1001 8560.1719 -7782.6274 8560.0322 C
-7782.6035 8559.8857 -7782.6436 8559.8301 -7782.7979 8559.8535 C
-7783.0903 8560.1055 L
-7783.4312 8560.0469 -7783.2842 8559.7705 -7783.2925 8559.5215 C
-7783.4746 8559.5645 -7783.6973 8559.5527 -7783.7803 8559.7383 C
-7784.0015 8559.4258 L
-7783.8398 8559.6514 -7784.1514 8559.5762 -7784.2368 8559.6367 C
-7784.1514 8559.5762 L
-7784.1846 8559.4697 -7784.3955 8559.5352 -7784.5024 8559.5664 C
-7784.4766 8559.7207 -7784.2617 8559.7832 -7784.1445 8559.8281 C
-7784.2373 8559.9375 -7784.3823 8559.9121 -7784.5059 8560.041 C
-7784.4648 8559.7969 -7784.8027 8559.8672 -7784.9473 8559.8418 C
-7785.1133 8559.7891 -7785.1348 8560.0605 -7785.1831 8560.0527 C
-7785.1875 8559.9258 -7785.4541 8560.0313 -7785.3247 8559.8535 C
-7785.2681 8559.8125 -7785.1953 8559.9766 -7785.1016 8559.8643 C
-7785.2109 8559.7705 -7785.1982 8559.5498 -7785.4258 8559.7109 C
-7785.5967 8559.832 -7785.3818 8560.1934 -7785.7061 8560.0391 C
-7785.6211 8559.9785 -7785.6055 8559.8809 -7785.5391 8559.793 C
-7785.8433 8559.666 L
-7785.8564 8559.8887 L
-7785.8975 8559.832 -7785.8691 8559.8125 -7785.8877 8559.7832 C
-7785.9785 8560.0176 -7786.3521 8559.8555 -7786.4209 8560.1191 C
-7786.5742 8560.1426 -7786.7441 8559.9648 -7786.8906 8559.9395 C
-7786.8623 8559.9199 L
-7787.0415 8559.7891 -7787.2793 8559.875 -7787.4297 8560.0254 C
-7787.4219 8559.9766 L
-7787.5195 8559.959 -7787.7505 8559.9941 -7787.8735 8560.125 C
-7788.1201 8559.957 -7787.9561 8559.2842 -7788.2295 8559.5645 C
-7788.48 8559.5723 -7788.6221 8559.9727 -7788.5215 8560.1152 C
-7788.9717 8559.9648 -7789.4834 8560.3281 -7789.9009 8559.9824 C
-7789.9658 8560.0723 -7789.9248 8560.1289 -7790.0586 8560.1816 C
-7790.7197 8560.0938 -7791.4551 8560.4453 -7791.9814 8560.0078 C
-7791.79 8559.9141 -7791.9688 8559.7842 -7791.9727 8559.6582 C
-7792.1309 8559.8574 -7792.1631 8559.4512 -7792.2197 8559.793 C
-7792.2041 8559.9941 -7792.2197 8560.0918 -7792.0337 8560.1729 C
-7792.4282 8560.2813 -7793.0283 8560.2813 -7793.2471 8560.0938 C
-7793.1377 8560.1865 -7793.2227 8560.248 -7793.3086 8560.3086 C
-7793.2803 8559.9873 -7793.5713 8559.9395 -7793.7915 8560.0527 C
-7793.8223 8560.248 L
-7793.9658 8560.0469 L
-7794.0503 8560.1094 -7794.0591 8560.457 -7794.2773 8560.2695 C
-7794.2891 8560.1934 -7794.3018 8560.1162 -7794.3418 8560.0605 C
-7794.5693 8560.2207 -7794.8906 8560.4922 -7795.1377 8560.3262 C
-7795.3398 8560.041 L
-7795.4453 8560.0723 -7795.6235 8560.2441 -7795.4375 8560.3262 C
-7795.8594 8560.1543 -7796.1309 8560.1328 -7796.2646 8559.8857 C
-7796.9912 8560.4873 -7798.0459 8560.5117 -7798.8906 8560.4688 C
-7798.8652 8560.3223 L
-7799.0923 8560.1855 -7798.9834 8560.5781 -7799.1416 8560.4766 C
-7799.0684 8560.3369 -7799.3145 8560.1729 -7799.1362 8560.002 C
-7799.4609 8559.8477 -7799.5547 8560.2559 -7799.7656 8560.3223 C
-7799.7979 8560.5146 -7799.5957 8560.1992 -7799.6367 8560.4434 C
-7799.6729 8560.5117 -7800.0859 8560.293 -7800.1362 8560.584 C
-7800.2178 8560.4697 -7800.1543 8560.2559 -7800.1104 8560.1377 C
-7800.3086 8560.2793 L
-7800.5513 8559.9395 -7799.7559 8559.6719 -7800.0107 8559.2529 C
-7800.1934 8559.2979 L
-7800.3682 8558.9941 -7799.71 8558.9551 -7800.1689 8558.8506 C
-7800.3682 8558.9941 -7800.5381 8559.416 -7800.3608 8559.5449 C
-7800.7754 8559.625 -7800.5527 8560.2383 -7800.9985 8560.2139 C
-7801.1201 8560.043 -7800.6416 8560.1729 -7800.7275 8559.9336 C
-7800.9375 8559.6992 -7801.1484 8560.0645 -7801.3354 8559.9824 C
-7801.1279 8560.0918 -7801.3032 8560.3857 -7801.4375 8560.4395 C
-7801.6641 8560.3018 -7801.29 8560.1641 -7801.6113 8560.1338 C
-7801.6641 8560.3018 -7801.9595 8560.4277 -7801.7041 8560.5449 C
-7801.8203 8560.9258 -7802.0381 8560.4395 -7802.2129 8560.7344 C
-7802.3174 8560.4658 -7801.8823 8560.1152 -7802.2354 8559.9814 C
-7802.1792 8560.2393 -7802.6704 8560.332 -7802.4839 8560.7139 C
-7802.6221 8560.6406 -7802.6367 8560.4375 -7802.5361 8560.2793 C
-7802.7334 8560.1201 -7803.0151 8560.75 -7803.0801 8560.2383 C
-7803.1479 8560.502 L
-7803.21 8560.416 -7803.2983 8560.3506 -7803.3994 8560.209 C
-7803.5732 8560.2041 -7803.96 8560.5664 -7803.9443 8560.168 C
-7804 8560.209 -7804.3975 8560.1914 -7804.2441 8560.4658 C
-7803.9971 8560.6338 -7803.96 8560.2656 -7803.8223 8560.6377 C
-7803.9971 8560.334 -7804.1787 8560.6777 -7804.3213 8560.7793 C
-7804.3447 8560.625 L
-7804.4297 8560.6855 -7804.6255 8560.6514 -7804.6787 8560.8184 C
-7804.6133 8560.7305 -7804.6475 8560.625 -7804.7148 8560.5879 C
-7804.8042 8560.8223 L
-7805.1494 8560.9395 -7804.8857 8560.4102 -7805.2217 8560.4785 C
-7804.9663 8560.2969 L
-7805.0225 8560.3359 -7805.1367 8560.1162 -7805.2979 8560.1895 C
-7805.3604 8560.4033 -7805.4775 8560.6602 -7805.5313 8560.8262 C
-7805.7207 8560.9199 -7805.6162 8560.585 -7805.8027 8560.8047 C
-7805.5586 8560.5469 L
-7805.5215 8560.4766 -7805.7231 8560.1934 -7805.9761 8560.1992 C
-7806.1377 8560.2734 -7806.3887 8560.582 -7806.1338 8560.6992 C
-7806.2607 8560.7031 -7806.4385 8560.5723 -7806.3379 8560.416 C
-7806.6255 8560.4902 -7806.2998 8560.6465 -7806.5479 8560.7793 C
-7806.6494 8560.6367 -7806.9658 8560.4336 -7807.1563 8560.2266 C
-7806.8975 8559.8682 L
-7807.0693 8559.8643 L
-7806.8467 8559.5781 -7807.1826 8559.6465 -7807.0566 8559.3438 C
-7807.1743 8559.2969 -7807.3169 8559.3994 -7807.4307 8559.4785 C
-7807.0864 8559.9629 -7807.8159 8560.1406 -7807.7158 8560.582 C
-7808.1875 8560.7031 -7808.0107 8559.5078 -7808.5024 8560.1992 C
-7808.4219 8560.3145 -7808.6533 8560.6504 -7808.3564 8560.5225 C
-7808.6494 8560.4746 -7808.5557 8560.9658 -7808.9014 8560.7832 C
-7808.6455 8560.6016 -7809.1763 8560.3359 -7808.8066 8560.0723 C
-7808.8311 8560.2178 -7808.6001 8560.1826 -7808.5435 8560.1426 C
-7808.6641 8559.9727 -7808.5186 8559.6973 -7808.8184 8559.6973 C
-7809.0015 8559.7393 -7809.2524 8559.748 -7809.2158 8559.9785 C
-7809.2085 8560.2314 -7808.9365 8559.9512 -7809.0537 8560.207 C
-7809.4185 8560.2949 -7809.4795 8559.9102 -7809.6304 8560.3594 C
-7809.3999 8560.3232 -7809.3423 8560.584 -7809.3467 8560.7578 C
-7809.6143 8560.8633 L
-7809.5625 8560.6953 L
-7809.9922 8560.5742 -7809.6895 8561 -7810.1055 8560.9551 C
-7810.3008 8560.623 L
-7810.2017 8560.3369 -7809.6953 8560.75 -7809.7695 8560.2842 C
-7810.04 8560.2656 -7810.1299 8560.502 -7810.3848 8560.3818 C
-7810.3281 8560.3418 -7810.2505 8560.3301 -7810.1943 8560.2891 C
-7810.2915 8560.2734 -7810.3877 8559.6563 -7810.7734 8560.0176 C
-7810.9727 8560.1582 -7810.8262 8560.1826 -7810.8311 8560.3574 C
-7811.2656 8560.4102 -7811.3955 8560.5879 -7811.6753 8560.6152 C
-7811.6177 8560.2754 -7812.1699 8560.582 -7811.8608 8560.2344 C
-7811.7188 8560.4336 -7811.0903 8560.4141 -7810.9365 8560.0898 C
-7811.0947 8559.6865 -7810.5952 8560.1465 -7810.5024 8559.7383 C
-7810.8506 8559.7285 -7810.8335 8559.332 -7810.8896 8559.0723 C
-7810.9863 8559.0537 -7811.0801 8559.1641 -7811.1377 8559.2041 C
-7811.1787 8559.4482 -7811.0522 8559.4453 -7811.0449 8559.6973 C
-7811.4336 8559.6309 -7811.8081 8559.7666 -7812.0225 8560.0059 C
-7812.1523 8559.8848 -7812.1113 8559.6406 -7811.9575 8559.6162 C
-7812.4199 8559.6895 -7812.9141 8559.6563 -7813.3535 8559.582 C
-7813.0693 8559.9814 -7813.8433 8559.6758 -7813.6494 8560.0078 C
-7813.4141 8560.0977 -7813.2119 8560.3818 -7813.3418 8560.5605 C
-7813.4888 8560.5352 -7813.3369 8560.3857 -7813.3984 8560.3008 C
-7813.5859 8560.5186 -7813.6895 8559.9512 -7813.8735 8560.2949 C
-7813.4512 8560.166 -7813.7915 8559.8086 -7813.7139 8559.4961 C
-7814.0186 8559.6719 -7813.7007 8559.2734 -7814.0024 8559.2734 C
-7814.3057 8559.4473 -7814.6787 8559.584 -7815.0161 8559.6514 C
-7815.4399 8559.3555 -7816.0898 8559.6465 -7816.4683 8559.6582 C
-7816.6665 8559.5 -7816.5322 8559.1465 -7816.7471 8559.085 C
-7816.9995 8559.0918 -7816.5601 8559.4658 -7816.9336 8559.3047 C
-7816.8975 8559.2344 L
-7817.0107 8559.3154 -7817.5825 8558.9941 -7817.6929 8559.502 C
-7817.5776 8559.1191 L
-7817.6475 8559.084 -7817.7119 8559.1719 -7817.7695 8559.2129 C
-7817.7725 8559.0879 -7817.8535 8558.9746 -7817.7402 8558.8926 C
-7817.9707 8558.6289 -7818.2241 8558.9346 -7818.4746 8558.9453 C
-7818.3135 8559.1719 L
-7818.7422 8559.3496 -7819.0293 8559.125 -7819.4443 8559.2041 C
-7819.4316 8558.9824 L
-7819.6787 8559.1152 L
-7819.6182 8558.8994 -7819.8447 8558.7617 -7819.9751 8558.9414 C
-7819.3335 8558.3984 L
-7819.1553 8558.5293 -7819.5283 8558.666 -7819.4165 8558.8848 C
-7819.3213 8559.0762 -7818.9375 8559.0146 -7818.8755 8558.8018 C
-7819.0225 8558.7773 -7819.0293 8558.8262 -7819.1436 8558.9063 C
-7819.1919 8558.5977 -7818.9688 8558.6094 -7818.8584 8558.4033 C
-7818.9355 8558.416 -7819.0449 8558.3223 -7819.0615 8558.4199 C
-7818.9102 8558.2695 -7818.7578 8558.2461 -7818.5059 8558.2383 C
-7818.6763 8558.3594 -7818.4131 8558.4297 -7818.4775 8558.5176 C
-7818.4575 8558.2461 -7818.2168 8558.1621 -7817.9053 8558.2383 C
-7817.6831 8558.5527 -7817.3208 8558.0361 -7816.96 8558.123 C
-7817.1064 8558.3984 -7817.2935 8558.6191 -7817.5127 8558.7305 C
-7817.2861 8558.8682 -7817.2607 8558.7227 -7817.0337 8558.8613 C
-7816.9238 8558.6563 -7816.8457 8558.3418 -7816.5503 8558.2168 C
-7816.5342 8558.4199 L
-7816.2666 8558.3154 -7816.2666 8558.0146 -7815.9258 8558.0723 C
-7815.3418 8558.1719 -7814.7407 8558.1719 -7814.2949 8558.1973 C
-7814.2783 8558.3994 L
-7814.0303 8557.9658 -7813.4521 8558.2393 -7813.1182 8558.0469 C
-7812.5503 8558.2422 -7811.8848 8557.8535 -7811.5938 8558.2031 C
-7810.5913 8558.0469 -7809.7148 8557.8945 -7808.6768 8557.9688 C
-7808.8516 8558.2637 L
-7808.6655 8558.0469 -7808.7305 8558.4336 -7808.5479 8558.3896 C
-7808.7578 8558.1543 -7808.2949 8558.084 -7808.1665 8557.9033 C
-7807.7041 8558.1328 -7807.1104 8557.8818 -7806.7007 8557.6758 C
-7806.6846 8557.8789 L
-7806.2705 8557.498 -7805.7759 8557.832 -7805.2598 8557.8945 C
-7805.2007 8557.9785 -7805.1074 8558.1689 -7804.9536 8558.1465 C
-7804.6738 8557.8184 -7804.5273 8557.8418 -7804.1167 8557.6367 C
-7803.8169 8557.6367 -7803.3301 8557.7178 -7803.0254 8557.8457 C
-7801.8975 8557.3848 -7800.7456 8557.6797 -7799.5732 8557.4023 C
-7799.4888 8557.6406 L
-7798.3521 8557.1309 -7796.9541 8557.5938 -7795.9839 8557.332 C
-7796.0776 8557.7393 L
-7795.7734 8557.8643 -7795.3843 8557.6328 -7795.4619 8557.3438 C
-7795.1567 8557.4688 -7794.7007 8557.1465 -7794.5068 8557.4814 C
-7794.1953 8557.5566 -7794.1255 8557.293 -7793.8662 8557.2383 C
-7793.2422 8557.3926 -7793.0107 8557.3574 -7792.4224 8557.2813 C
-7792.5684 8557.2559 L
-7792.6328 8557.3457 -7792.6387 8557.5186 -7792.4922 8557.5449 C
-7792.2725 8557.4307 -7791.6846 8557.6543 -7791.9033 8557.168 C
-7791.2754 8557.4482 -7790.4385 8556.9395 -7789.8271 8557.3184 C
-7789.8789 8557.1855 -7789.7246 8557.1602 -7789.6602 8557.0703 C
-7789.1089 8557.0645 -7788.5293 8557.3359 -7788.0898 8557.1094 C
-7788.0024 8557.1758 -7788.2295 8557.3359 -7788.0049 8557.3496 C
-7787.8721 8557.2979 -7788.0024 8557.1758 -7787.8384 8557.1016 C
-7786.9453 8556.8535 -7786.0303 8557.3574 -7785.2188 8557.293 C
-7783.7754 8557.0361 -7782.2695 8557.166 -7780.8867 8557.123 C
-7780.9023 8557.2207 L
-7780.4395 8556.8477 -7779.8159 8557.6025 -7779.4463 8557.041 C
-7779.3369 8557.1338 -7779.0283 8557.085 -7779.1094 8557.2734 C
-7778.7407 8557.0098 -7778.0771 8557.5215 -7777.5439 8557.1865 C
-7777.5928 8557.1777 -7777.6211 8557.1973 -7777.6777 8557.2393 C
-7777.1392 8557.4551 -7776.6641 8557.1602 -7776.0957 8557.3555 C
-7776.1533 8557.3975 -7776.2583 8557.4277 -7776.2754 8557.5254 C
-7776.0557 8557.7129 -7775.7549 8557.1133 -7775.6348 8557.584 C
-7775.5088 8557.5801 -7775.5449 8557.3477 -7775.6221 8557.3613 C
-7774.3779 8557.5449 -7773.0498 8557.2441 -7771.7549 8557.1367 C
-7770.8271 8557.418 -7771.6982 8557.9297 -7770.9663 8557.5781 C
-7770.9063 8557.6689 -7770.9229 8557.3984 -7770.9131 8557.4961 C
-7770.6299 8557.3643 -7770.4717 8558.0215 -7770.2754 8557.7754 C
-7770.3564 8557.4863 -7770.1445 8557.6133 -7770.1387 8557.4375 C
-7769.5713 8557.625 -7769.4575 8557.8857 -7769.0098 8557.666 C
-7769.0435 8557.8184 L
-7768.5186 8557.3887 -7767.9102 8557.6191 -7767.4673 8557.123 C
-7764.5728 8557.0322 -7761.7983 8556.7578 -7758.9761 8556.7002 C
-7756.1865 8556.7949 -7753.4551 8556.5723 -7750.6221 8556.8359 C
-7749.9585 8557.2354 -7749.9087 8557.2246 -7749.1797 8557.0625 C
-7749.2095 8557.127 -7749.2549 8557.1426 -7749.2061 8557.2031 C
-7749.1699 8556.875 -7748.6929 8557.1719 -7748.6235 8556.8594 C
-7747.5762 8556.9199 -7746.6113 8556.8301 -7745.5337 8556.8281 C
-7745.7041 8556.8633 -7745.7896 8557.1309 -7745.5869 8557.1094 C
-7745.3755 8556.8994 L
-7745.3408 8556.9922 L
-7745.2021 8556.9434 -7745.0513 8556.7813 -7745.1943 8556.6758 C
-7742.4873 8556.3926 -7739.8242 8557.0498 -7737.1729 8556.9697 C
-7736.5435 8557.1064 -7735.6475 8556.9814 -7734.9629 8556.9141 C
-7732.9355 8557.3506 -7731.1079 8557.7041 -7729.0479 8557.3984 C
-7729.3169 8558.2461 -7730.1675 8558.4414 V
f
-7820.2578 8558.2422 m
-7820.1855 8558.4063 -7819.9497 8558.4961 -7820.1377 8558.7139 C
-7820.1611 8558.5605 -7820.2822 8558.3887 -7820.2578 8558.2422 C
f
-7813.9619 8559.9297 m
-7813.9536 8559.8809 -7813.8721 8559.9961 -7813.8521 8560.0225 C
-7813.9297 8560.0352 -7814.0024 8560.1729 -7814.0645 8560.0879 C
-7813.9854 8560.0762 -7813.9976 8559.998 -7813.9619 8559.9297 C
f
-7812.3521 8560.0273 m
-7812.3765 8560.1729 -7812.7207 8560.2891 -7812.9238 8560.3066 C
-7812.3521 8560.0273 L
f
-7810.8521 8560.6289 m
-7810.7227 8560.752 -7810.7583 8560.8193 -7810.9326 8560.8154 C
-7810.9453 8560.7383 -7810.8877 8560.6992 -7810.8521 8560.6289 C
f
-7810.7456 8560.2969 m
-7810.6211 8560.293 -7810.5591 8560.3789 -7810.4985 8560.4629 C
-7810.5029 8560.3369 -7810.7871 8560.541 -7810.7456 8560.2969 C
f
-7807.4893 8560.7207 m
-7807.4111 8560.709 -7807.2417 8560.5879 -7807.1689 8560.75 C
-7807.2505 8560.6367 -7807.5498 8560.9346 -7807.4893 8560.7207 C
f
-7805.9761 8560.5 m
-7805.9272 8560.5098 -7805.9072 8560.5361 -7805.8506 8560.4961 C
-7805.7607 8560.5625 -7805.8555 8560.6689 -7805.9312 8560.6826 C
-7805.9761 8560.5 L
f
-7778.4287 8559.9141 m
-7778.5923 8559.9863 L
-7778.5684 8559.8418 L
-7778.4287 8559.9141 L
f
-7766.3574 8559.9063 m
-7766.1943 8559.8145 -7766.2441 8560.043 -7766.2168 8560.0645 C
-7766.3643 8560.0801 -7766.1621 8559.8848 -7766.3574 8559.9063 C
f
-7759.8486 8559.1777 m
-7759.8984 8559.1816 L
-7759.8818 8558.8818 L
-7759.8486 8559.1777 L
f
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pattern 6)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-7820 8558.4824 m
-7677.0806 8558.4824 L
-7677.0806 8535.4023 L
-7820 8535.4023 L
-7820 8558.4824 L
n
u
0 O
0.784909 0.943603 0.343206 0.271733 0.290196 0.156863 0.352941 Xa
-7758.6196 8540.5117 m
-7756.9126 8543.04 -7754.3247 8546.0801 -7751.3345 8549.0703 c
-7745.8403 8554.5625 -7739.1841 8559.582 -7737.6665 8558.0654 C
-7738.0161 8557.7148 L
-7738.3794 8558.0762 -7739.7476 8557.8018 -7742.4985 8555.9453 c
-7745.0005 8554.2559 -7748.0142 8551.6895 -7750.9829 8548.7197 c
-7757.4546 8542.248 -7759.9795 8537.6309 -7759.0415 8536.6914 C
-7760.3296 8535.4023 L
-7761.0195 8536.0918 -7760.4438 8537.8105 -7758.6196 8540.5117 c
f
-7765.8843 8548.4727 m
-7765.3892 8548.4727 L
-7765.3892 8547.1445 -7759.0103 8545.6641 -7749.8589 8545.6641 c
-7740.7075 8545.6641 -7734.3306 8547.1445 -7734.3306 8548.4727 C
-7732.1138 8548.4727 L
-7732.1138 8546.3271 -7742.0903 8545.168 -7749.8589 8545.168 c
-7757.6284 8545.168 -7765.8843 8546.3271 -7765.8843 8548.4727 C
f
-7742.0288 8537.5293 m
-7744.5562 8539.2354 -7747.5962 8541.8242 -7750.5864 8544.8145 c
-7756.0796 8550.3086 -7761.0991 8556.9648 -7759.5815 8558.4824 C
-7758.5278 8557.4277 L
-7759.4663 8556.4873 -7756.7075 8551.6367 -7750.2358 8545.1641 c
-7747.2671 8542.1953 -7744.2534 8539.6289 -7741.7524 8537.9395 c
-7739.0005 8536.082 -7737.6323 8535.8066 -7737.2695 8536.1689 C
-7736.9185 8535.8193 L
-7737.6099 8535.1289 -7739.3286 8535.7041 -7742.0288 8537.5293 c
f
u
1 Ap
-7744.0376 8548.1426 m
-7744.0376 8550.5596 -7745.9985 8552.5186 -7748.4146 8552.5186 c
-7750.8325 8552.5186 -7752.7935 8550.5596 -7752.7935 8548.1426 c
-7752.7935 8545.7246 -7750.8325 8543.7646 -7748.4146 8543.7646 c
-7745.9985 8543.7646 -7744.0376 8545.7246 -7744.0376 8548.1426 c
f
/ShapeBlendPathID (B) XT
/ShapeBlendPathType (K) XT
0 Ap
0.770748 0.856626 0.326513 0.2056 0.309804 0.223529 0.4 Xa
-7744.3267 8547.9922 m
-7744.3267 8550.166 -7746.0903 8551.9297 -7748.2642 8551.9297 c
-7750.4399 8551.9297 -7752.2036 8550.166 -7752.2036 8547.9922 c
-7752.2036 8545.8154 -7750.4399 8544.0537 -7748.2642 8544.0537 c
-7746.0903 8544.0537 -7744.3267 8545.8154 -7744.3267 8547.9922 c
f
0.74902 0.768002 0.307927 0.149447 0.329412 0.286275 0.447059 Xa
-7744.6177 8547.8418 m
-7744.6177 8549.7734 -7746.1841 8551.3398 -7748.1147 8551.3398 c
-7750.0464 8551.3398 -7751.6128 8549.7734 -7751.6128 8547.8418 c
-7751.6128 8545.9102 -7750.0464 8544.3447 -7748.1147 8544.3447 c
-7746.1841 8544.3447 -7744.6177 8545.9102 -7744.6177 8547.8418 c
f
0.730343 0.674983 0.286107 0.098207 0.345098 0.34902 0.498039 Xa
-7744.9067 8547.6914 m
-7744.9067 8549.3799 -7746.2769 8550.749 -7747.9653 8550.749 c
-7749.6528 8550.749 -7751.0225 8549.3799 -7751.0225 8547.6914 c
-7751.0225 8546.0029 -7749.6528 8544.6348 -7747.9653 8544.6348 c
-7746.2769 8544.6348 -7744.9067 8546.0029 -7744.9067 8547.6914 c
f
0.706355 0.591241 0.255985 0.053925 0.364706 0.407843 0.552941 Xa
-7745.1978 8547.541 m
-7745.1978 8548.9863 -7746.3696 8550.1582 -7747.8149 8550.1582 c
-7749.2603 8550.1582 -7750.4321 8548.9863 -7750.4321 8547.541 c
-7750.4321 8546.0957 -7749.2603 8544.9248 -7747.8149 8544.9248 c
-7746.3696 8544.9248 -7745.1978 8546.0957 -7745.1978 8547.541 c
f
0.674769 0.490669 0.218662 0.018524 0.384314 0.47451 0.615686 Xa
-7745.4868 8547.3906 m
-7745.4868 8548.5938 -7746.4634 8549.5674 -7747.6646 8549.5674 c
-7748.8667 8549.5674 -7749.8423 8548.5938 -7749.8423 8547.3906 c
-7749.8423 8546.1895 -7748.8667 8545.2139 -7747.6646 8545.2139 c
-7746.4634 8545.2139 -7745.4868 8546.1895 -7745.4868 8547.3906 c
f
0.64123 0.384558 0.172763 0.003479 0.4 0.545098 0.686275 Xa
-7745.7778 8547.2402 m
-7745.7778 8548.2002 -7746.5552 8548.9785 -7747.5142 8548.9785 c
-7748.4731 8548.9785 -7749.2515 8548.2002 -7749.2515 8547.2402 c
-7749.2515 8546.2822 -7748.4731 8545.5049 -7747.5142 8545.5049 c
-7746.5552 8545.5049 -7745.7778 8546.2822 -7745.7778 8547.2402 c
f
0.596033 0.266423 0.124788 0.000031 0.415686 0.623529 0.760784 Xa
-7746.0679 8547.0908 m
-7746.0679 8547.8066 -7746.6489 8548.3877 -7747.3638 8548.3877 c
-7748.0806 8548.3877 -7748.6606 8547.8066 -7748.6606 8547.0908 c
-7748.6606 8546.375 -7748.0806 8545.7949 -7747.3638 8545.7949 c
-7746.6489 8545.7949 -7746.0679 8546.375 -7746.0679 8547.0908 c
f
0.547051 0.146303 0.061738 0.000031 0.427451 0.701961 0.843137 Xa
-7746.3579 8546.9414 m
-7746.3579 8547.4141 -7746.7417 8547.7969 -7747.2134 8547.7969 c
-7747.6875 8547.7969 -7748.0708 8547.4141 -7748.0708 8546.9414 c
-7748.0708 8546.4688 -7747.6875 8546.085 -7747.2134 8546.085 c
-7746.7417 8546.085 -7746.3579 8546.4688 -7746.3579 8546.9414 c
f
1 Ap
0.492195 0.014221 0.001282 0.000031 0.443137 0.803922 0.956863 Xa
-7746.6479 8546.791 m
-7746.6479 8547.0205 -7746.8345 8547.207 -7747.0645 8547.207 c
-7747.2935 8547.207 -7747.4814 8547.0205 -7747.4814 8546.791 c
-7747.4814 8546.5605 -7747.2935 8546.375 -7747.0645 8546.375 c
-7746.8345 8546.375 -7746.6479 8546.5605 -7746.6479 8546.791 c
f
/ShapeBlendPathID (A) XT
/ShapeBlendPathType (K) XT
U
u
u
0.784909 0.943603 0.343206 0.271733 0.290196 0.156863 0.352941 Xa
-7769.7329 8548.5186 m
-7769.7329 8550.6191 -7771.4341 8552.3223 -7773.5337 8552.3223 c
-7775.6348 8552.3223 -7777.3369 8550.6191 -7777.3369 8548.5186 c
-7777.3369 8546.4199 -7775.6348 8544.7178 -7773.5337 8544.7178 c
-7771.4341 8544.7178 -7769.7329 8546.4199 -7769.7329 8548.5186 c
f
0 Ap
0.770748 0.856626 0.326513 0.2056 0.309804 0.223529 0.4 Xa
-7776.7437 8548.3896 m
-7776.7437 8546.5 -7775.2485 8544.9697 -7773.4038 8544.9697 c
-7771.5601 8544.9697 -7770.0649 8546.5 -7770.0649 8548.3896 c
-7770.0649 8550.2783 -7771.5601 8551.8096 -7773.4038 8551.8096 c
-7775.2485 8551.8096 -7776.7437 8550.2783 -7776.7437 8548.3896 c
f
0.74902 0.768002 0.307927 0.149447 0.329412 0.286275 0.447059 Xa
-7776.1509 8548.2578 m
-7776.1509 8546.5811 -7774.8628 8545.2217 -7773.2739 8545.2217 c
-7771.6851 8545.2217 -7770.3975 8546.5811 -7770.3975 8548.2578 c
-7770.3975 8549.9375 -7771.6851 8551.2969 -7773.2739 8551.2969 c
-7774.8628 8551.2969 -7776.1509 8549.9375 -7776.1509 8548.2578 c
f
0.730343 0.674983 0.286107 0.098207 0.345098 0.34902 0.498039 Xa
-7775.5576 8548.1289 m
-7775.5576 8546.6621 -7774.4771 8545.4736 -7773.1431 8545.4736 c
-7771.8091 8545.4736 -7770.7295 8546.6621 -7770.7295 8548.1289 c
-7770.7295 8549.5957 -7771.8091 8550.7842 -7773.1431 8550.7842 c
-7774.4771 8550.7842 -7775.5576 8549.5957 -7775.5576 8548.1289 c
f
0.706355 0.591241 0.255985 0.053925 0.364706 0.407843 0.552941 Xa
-7774.9648 8547.998 m
-7774.9648 8546.7422 -7774.0903 8545.7256 -7773.0122 8545.7256 c
-7771.9351 8545.7256 -7771.0615 8546.7422 -7771.0615 8547.998 c
-7771.0615 8549.2529 -7771.9351 8550.2705 -7773.0122 8550.2705 c
-7774.0903 8550.2705 -7774.9648 8549.2529 -7774.9648 8547.998 c
f
0.674769 0.490669 0.218662 0.018524 0.384314 0.47451 0.615686 Xa
-7774.3716 8547.8672 m
-7774.3716 8546.8242 -7773.7046 8545.9775 -7772.8833 8545.9775 c
-7772.0601 8545.9775 -7771.3931 8546.8242 -7771.3931 8547.8672 c
-7771.3931 8548.9121 -7772.0601 8549.7578 -7772.8833 8549.7578 c
-7773.7046 8549.7578 -7774.3716 8548.9121 -7774.3716 8547.8672 c
f
0.64123 0.384558 0.172763 0.003479 0.4 0.545098 0.686275 Xa
-7773.7788 8547.7373 m
-7773.7788 8546.9033 -7773.3188 8546.2295 -7772.7524 8546.2295 c
-7772.1851 8546.2295 -7771.7251 8546.9033 -7771.7251 8547.7373 c
-7771.7251 8548.5703 -7772.1851 8549.2461 -7772.7524 8549.2461 c
-7773.3188 8549.2461 -7773.7788 8548.5703 -7773.7788 8547.7373 c
f
0.596033 0.266423 0.124788 0.000031 0.415686 0.623529 0.760784 Xa
-7773.1865 8547.6074 m
-7773.1865 8546.9854 -7772.9331 8546.4814 -7772.6216 8546.4814 c
-7772.3101 8546.4814 -7772.0571 8546.9854 -7772.0571 8547.6074 c
-7772.0571 8548.2285 -7772.3101 8548.7324 -7772.6216 8548.7324 c
-7772.9331 8548.7324 -7773.1865 8548.2285 -7773.1865 8547.6074 c
f
0.547051 0.146303 0.061738 0.000031 0.427451 0.701961 0.843137 Xa
-7772.5923 8547.4766 m
-7772.5923 8547.0664 -7772.5474 8546.7324 -7772.4907 8546.7324 c
-7772.4365 8546.7324 -7772.3892 8547.0664 -7772.3892 8547.4766 c
-7772.3892 8547.8857 -7772.4365 8548.2207 -7772.4907 8548.2207 c
-7772.5474 8548.2207 -7772.5923 8547.8857 -7772.5923 8547.4766 c
f
1 Ap
0.492195 0.014221 0.001282 0.000031 0.443137 0.803922 0.956863 Xa
-7771.9995 8547.3457 m
-7771.9995 8547.5449 -7772.1606 8547.708 -7772.3608 8547.708 c
-7772.5601 8547.708 -7772.7222 8547.5449 -7772.7222 8547.3457 c
-7772.7222 8547.1465 -7772.5601 8546.9854 -7772.3608 8546.9854 c
-7772.1606 8546.9854 -7771.9995 8547.1465 -7771.9995 8547.3457 c
f
U
/ShapeBlendPathID (B) XT
/ShapeBlendPathType (K) XT
u
0 Ap
0.784909 0.943603 0.343206 0.271733 0.290196 0.156863 0.352941 Xa
-7781.1841 8548.5186 m
-7781.1841 8550.4023 -7782.7104 8551.9297 -7784.5933 8551.9297 c
-7786.4761 8551.9297 -7788.0029 8550.4023 -7788.0029 8548.5186 c
-7788.0029 8546.6367 -7786.4761 8545.1113 -7784.5933 8545.1113 c
-7782.7104 8545.1113 -7781.1841 8546.6367 -7781.1841 8548.5186 c
f
0.770748 0.856626 0.326513 0.2056 0.309804 0.223529 0.4 Xa
-7781.4702 8548.4033 m
-7781.4702 8550.0967 -7782.8159 8551.4697 -7784.4761 8551.4697 c
-7786.1367 8551.4697 -7787.4824 8550.0967 -7787.4824 8548.4033 c
-7787.4824 8546.709 -7786.1367 8545.3369 -7784.4761 8545.3369 c
-7782.8159 8545.3369 -7781.4702 8546.709 -7781.4702 8548.4033 c
f
0.74902 0.768002 0.307927 0.149447 0.329412 0.286275 0.447059 Xa
-7781.7563 8548.2842 m
-7781.7563 8549.791 -7782.9219 8551.0098 -7784.3589 8551.0098 c
-7785.7974 8551.0098 -7786.9629 8549.791 -7786.9629 8548.2842 c
-7786.9629 8546.7813 -7785.7974 8545.5625 -7784.3589 8545.5625 c
-7782.9219 8545.5625 -7781.7563 8546.7813 -7781.7563 8548.2842 c
f
0.730343 0.674983 0.286107 0.098207 0.345098 0.34902 0.498039 Xa
-7782.0425 8548.168 m
-7782.0425 8549.4844 -7783.0273 8550.5498 -7784.2422 8550.5498 c
-7785.4585 8550.5498 -7786.4429 8549.4844 -7786.4429 8548.168 c
-7786.4429 8546.8535 -7785.4585 8545.7891 -7784.2422 8545.7891 c
-7783.0273 8545.7891 -7782.0425 8546.8535 -7782.0425 8548.168 c
f
0.706355 0.591241 0.255985 0.053925 0.364706 0.407843 0.552941 Xa
-7782.3286 8548.0518 m
-7782.3286 8549.1777 -7783.1328 8550.0898 -7784.1255 8550.0898 c
-7785.1182 8550.0898 -7785.9229 8549.1777 -7785.9229 8548.0518 c
-7785.9229 8546.9258 -7785.1182 8546.0146 -7784.1255 8546.0146 c
-7783.1328 8546.0146 -7782.3286 8546.9258 -7782.3286 8548.0518 c
f
0.674769 0.490669 0.218662 0.018524 0.384314 0.47451 0.615686 Xa
-7782.6147 8547.9346 m
-7782.6147 8548.8711 -7783.2388 8549.6309 -7784.0088 8549.6309 c
-7784.7783 8549.6309 -7785.4028 8548.8711 -7785.4028 8547.9346 c
-7785.4028 8546.999 -7784.7783 8546.2402 -7784.0088 8546.2402 c
-7783.2388 8546.2402 -7782.6147 8546.999 -7782.6147 8547.9346 c
f
0.64123 0.384558 0.172763 0.003479 0.4 0.545098 0.686275 Xa
-7782.9009 8547.8184 m
-7782.9009 8548.5645 -7783.3442 8549.1689 -7783.8921 8549.1689 c
-7784.4395 8549.1689 -7784.8828 8548.5645 -7784.8828 8547.8184 c
-7784.8828 8547.0723 -7784.4395 8546.4668 -7783.8921 8546.4668 c
-7783.3442 8546.4668 -7782.9009 8547.0723 -7782.9009 8547.8184 c
f
0.596033 0.266423 0.124788 0.000031 0.415686 0.623529 0.760784 Xa
-7783.1875 8547.7002 m
-7783.1875 8548.2598 -7783.4497 8548.7109 -7783.7749 8548.7109 c
-7784.1001 8548.7109 -7784.3628 8548.2598 -7784.3628 8547.7002 c
-7784.3628 8547.1445 -7784.1001 8546.6924 -7783.7749 8546.6924 c
-7783.4497 8546.6924 -7783.1875 8547.1445 -7783.1875 8547.7002 c
f
0.547051 0.146303 0.061738 0.000031 0.427451 0.701961 0.843137 Xa
-7783.4727 8547.584 m
-7783.4727 8547.3359 -7783.5562 8547.1357 -7783.6577 8547.1357 c
-7783.7603 8547.1357 -7783.8433 8547.3359 -7783.8433 8547.584 c
-7783.8433 8547.832 -7783.7603 8548.0332 -7783.6577 8548.0332 c
-7783.5562 8548.0332 -7783.4727 8547.832 -7783.4727 8547.584 c
f
0.492195 0.014221 0.001282 0.000031 0.443137 0.803922 0.956863 Xa
-7783.7593 8547.4668 m
-7783.7593 8547.2891 -7783.6611 8547.1445 -7783.5405 8547.1445 c
-7783.4204 8547.1445 -7783.3232 8547.2891 -7783.3232 8547.4668 c
-7783.3232 8547.6465 -7783.4204 8547.792 -7783.5405 8547.792 c
-7783.6611 8547.792 -7783.7593 8547.6465 -7783.7593 8547.4668 c
f
U
u
0.784909 0.943603 0.343206 0.271733 0.290196 0.156863 0.352941 Xa
-7792.6362 8548.5186 m
-7792.6362 8550.1855 -7793.9863 8551.5352 -7795.6519 8551.5352 c
-7797.3179 8551.5352 -7798.6685 8550.1855 -7798.6685 8548.5186 c
-7798.6685 8546.8535 -7797.3179 8545.5039 -7795.6519 8545.5039 c
-7793.9863 8545.5039 -7792.6362 8546.8535 -7792.6362 8548.5186 c
f
0.770748 0.856626 0.326513 0.2056 0.309804 0.223529 0.4 Xa
-7792.8765 8548.416 m
-7792.8765 8549.9141 -7794.0728 8551.1289 -7795.5483 8551.1289 c
-7797.0249 8551.1289 -7798.2212 8549.9141 -7798.2212 8548.416 c
-7798.2212 8546.918 -7797.0249 8545.7041 -7795.5483 8545.7041 c
-7794.0728 8545.7041 -7792.8765 8546.918 -7792.8765 8548.416 c
f
0.74902 0.768002 0.307927 0.149447 0.329412 0.286275 0.447059 Xa
-7793.1162 8548.3125 m
-7793.1162 8549.6445 -7794.1592 8550.7227 -7795.4448 8550.7227 c
-7796.7319 8550.7227 -7797.7749 8549.6445 -7797.7749 8548.3125 c
-7797.7749 8546.9824 -7796.7319 8545.9033 -7795.4448 8545.9033 c
-7794.1592 8545.9033 -7793.1162 8546.9824 -7793.1162 8548.3125 c
f
0.730343 0.674983 0.286107 0.098207 0.345098 0.34902 0.498039 Xa
-7793.3564 8548.209 m
-7793.3564 8549.373 -7794.2446 8550.3164 -7795.3413 8550.3164 c
-7796.4395 8550.3164 -7797.3276 8549.373 -7797.3276 8548.209 c
-7797.3276 8547.0469 -7796.4395 8546.1025 -7795.3413 8546.1025 c
-7794.2446 8546.1025 -7793.3564 8547.0469 -7793.3564 8548.209 c
f
0.706355 0.591241 0.255985 0.053925 0.364706 0.407843 0.552941 Xa
-7793.5962 8548.1055 m
-7793.5962 8549.1016 -7794.3315 8549.9082 -7795.2383 8549.9082 c
-7796.1455 8549.9082 -7796.8809 8549.1016 -7796.8809 8548.1055 c
-7796.8809 8547.1094 -7796.1455 8546.3018 -7795.2383 8546.3018 c
-7794.3315 8546.3018 -7793.5962 8547.1094 -7793.5962 8548.1055 c
f
0.674769 0.490669 0.218662 0.018524 0.384314 0.47451 0.615686 Xa
-7793.8359 8548.002 m
-7793.8359 8548.8311 -7794.4175 8549.502 -7795.1353 8549.502 c
-7795.8521 8549.502 -7796.4341 8548.8311 -7796.4341 8548.002 c
-7796.4341 8547.1738 -7795.8521 8546.5039 -7795.1353 8546.5039 c
-7794.4175 8546.5039 -7793.8359 8547.1738 -7793.8359 8548.002 c
f
0.64123 0.384558 0.172763 0.003479 0.4 0.545098 0.686275 Xa
-7794.0762 8547.8984 m
-7794.0762 8548.5605 -7794.5034 8549.0957 -7795.0317 8549.0957 c
-7795.5596 8549.0957 -7795.9873 8548.5605 -7795.9873 8547.8984 c
-7795.9873 8547.2383 -7795.5596 8546.7031 -7795.0317 8546.7031 c
-7794.5034 8546.7031 -7794.0762 8547.2383 -7794.0762 8547.8984 c
f
0.596033 0.266423 0.124788 0.000031 0.415686 0.623529 0.760784 Xa
-7794.3159 8547.7959 m
-7794.3159 8548.2891 -7794.5898 8548.6895 -7794.9282 8548.6895 c
-7795.2661 8548.6895 -7795.5405 8548.2891 -7795.5405 8547.7959 c
-7795.5405 8547.3018 -7795.2661 8546.9023 -7794.9282 8546.9023 c
-7794.5898 8546.9023 -7794.3159 8547.3018 -7794.3159 8547.7959 c
f
0.547051 0.146303 0.061738 0.000031 0.427451 0.701961 0.843137 Xa
-7794.5557 8547.6924 m
-7794.5557 8547.6074 -7794.6763 8547.5391 -7794.8247 8547.5391 c
-7794.9731 8547.5391 -7795.0933 8547.6074 -7795.0933 8547.6924 c
-7795.0933 8547.7773 -7794.9731 8547.8457 -7794.8247 8547.8457 c
-7794.6763 8547.8457 -7794.5557 8547.7773 -7794.5557 8547.6924 c
f
0.492195 0.014221 0.001282 0.000031 0.443137 0.803922 0.956863 Xa
-7794.7959 8547.5889 m
-7794.7959 8547.4316 -7794.7622 8547.3018 -7794.7212 8547.3018 c
-7794.6802 8547.3018 -7794.6465 8547.4316 -7794.6465 8547.5889 c
-7794.6465 8547.748 -7794.6802 8547.876 -7794.7212 8547.876 c
-7794.7622 8547.876 -7794.7959 8547.748 -7794.7959 8547.5889 c
f
U
u
0.784909 0.943603 0.343206 0.271733 0.290196 0.156863 0.352941 Xa
-7804.0884 8548.5186 m
-7804.0884 8549.9688 -7805.2622 8551.1426 -7806.7104 8551.1426 c
-7808.1597 8551.1426 -7809.3345 8549.9688 -7809.3345 8548.5186 c
-7809.3345 8547.0703 -7808.1597 8545.8975 -7806.7104 8545.8975 c
-7805.2622 8545.8975 -7804.0884 8547.0703 -7804.0884 8548.5186 c
f
0.770748 0.856626 0.326513 0.2056 0.309804 0.223529 0.4 Xa
-7804.2817 8548.4297 m
-7804.2817 8549.7324 -7805.3291 8550.7891 -7806.6211 8550.7891 c
-7807.9131 8550.7891 -7808.9604 8549.7324 -7808.9604 8548.4297 c
-7808.9604 8547.127 -7807.9131 8546.0703 -7806.6211 8546.0703 c
-7805.3291 8546.0703 -7804.2817 8547.127 -7804.2817 8548.4297 c
f
0.74902 0.768002 0.307927 0.149447 0.329412 0.286275 0.447059 Xa
-7804.4761 8548.3398 m
-7804.4761 8549.498 -7805.3965 8550.4346 -7806.5308 8550.4346 c
-7807.6665 8550.4346 -7808.5864 8549.498 -7808.5864 8548.3398 c
-7808.5864 8547.1826 -7807.6665 8546.2441 -7806.5308 8546.2441 c
-7805.3965 8546.2441 -7804.4761 8547.1826 -7804.4761 8548.3398 c
f
0.730343 0.674983 0.286107 0.098207 0.345098 0.34902 0.498039 Xa
-7804.6694 8548.25 m
-7804.6694 8549.2617 -7805.4624 8550.082 -7806.4409 8550.082 c
-7807.4199 8550.082 -7808.2124 8549.2617 -7808.2124 8548.25 c
-7808.2124 8547.2383 -7807.4199 8546.4189 -7806.4409 8546.4189 c
-7805.4624 8546.4189 -7804.6694 8547.2383 -7804.6694 8548.25 c
f
0.706355 0.591241 0.255985 0.053925 0.364706 0.407843 0.552941 Xa
-7804.8638 8548.1602 m
-7804.8638 8549.0254 -7805.5293 8549.7285 -7806.3511 8549.7285 c
-7807.1729 8549.7285 -7807.8389 8549.0254 -7807.8389 8548.1602 c
-7807.8389 8547.293 -7807.1729 8546.5918 -7806.3511 8546.5918 c
-7805.5293 8546.5918 -7804.8638 8547.293 -7804.8638 8548.1602 c
f
0.674769 0.490669 0.218662 0.018524 0.384314 0.47451 0.615686 Xa
-7805.0571 8548.0703 m
-7805.0571 8548.791 -7805.5962 8549.375 -7806.2612 8549.375 c
-7806.9263 8549.375 -7807.4648 8548.791 -7807.4648 8548.0703 c
-7807.4648 8547.3496 -7806.9263 8546.7656 -7806.2612 8546.7656 c
-7805.5962 8546.7656 -7805.0571 8547.3496 -7805.0571 8548.0703 c
f
0.64123 0.384558 0.172763 0.003479 0.4 0.545098 0.686275 Xa
-7805.2515 8547.9805 m
-7805.2515 8548.5537 -7805.6631 8549.0205 -7806.1714 8549.0205 c
-7806.6797 8549.0205 -7807.0913 8548.5537 -7807.0913 8547.9805 c
-7807.0913 8547.4063 -7806.6797 8546.9395 -7806.1714 8546.9395 c
-7805.6631 8546.9395 -7805.2515 8547.4063 -7805.2515 8547.9805 c
f
0.596033 0.266423 0.124788 0.000031 0.415686 0.623529 0.760784 Xa
-7805.4448 8547.8906 m
-7805.4448 8548.3193 -7805.73 8548.667 -7806.0811 8548.667 c
-7806.4331 8548.667 -7806.7178 8548.3193 -7806.7178 8547.8906 c
-7806.7178 8547.4609 -7806.4331 8547.1133 -7806.0811 8547.1133 c
-7805.73 8547.1133 -7805.4448 8547.4609 -7805.4448 8547.8906 c
f
0.547051 0.146303 0.061738 0.000031 0.427451 0.701961 0.843137 Xa
-7805.6387 8547.8008 m
-7805.6387 8547.8789 -7805.7969 8547.9414 -7805.9912 8547.9414 c
-7806.1865 8547.9414 -7806.3438 8547.8789 -7806.3438 8547.8008 c
-7806.3438 8547.7227 -7806.1865 8547.6592 -7805.9912 8547.6592 c
-7805.7969 8547.6592 -7805.6387 8547.7227 -7805.6387 8547.8008 c
f
0.492195 0.014221 0.001282 0.000031 0.443137 0.803922 0.956863 Xa
-7805.8325 8547.7109 m
-7805.8325 8547.5723 -7805.8638 8547.4609 -7805.9009 8547.4609 c
-7805.9395 8547.4609 -7805.9697 8547.5723 -7805.9697 8547.7109 c
-7805.9697 8547.8477 -7805.9395 8547.96 -7805.9009 8547.96 c
-7805.8638 8547.96 -7805.8325 8547.8477 -7805.8325 8547.7109 c
f
U
u
1 Ap
0.784909 0.943603 0.343206 0.271733 0.290196 0.156863 0.352941 Xa
-7815.54 8548.5186 m
-7815.54 8549.752 -7816.5386 8550.75 -7817.7695 8550.75 c
-7819.0015 8550.75 -7820 8549.752 -7820 8548.5186 c
-7820 8547.2881 -7819.0015 8546.291 -7817.7695 8546.291 c
-7816.5386 8546.291 -7815.54 8547.2881 -7815.54 8548.5186 c
f
0 Ap
0.770748 0.856626 0.326513 0.2056 0.309804 0.223529 0.4 Xa
-7815.6875 8548.4434 m
-7815.6875 8549.5498 -7816.5854 8550.4492 -7817.6934 8550.4492 c
-7818.8013 8550.4492 -7819.6992 8549.5498 -7819.6992 8548.4434 c
-7819.6992 8547.3359 -7818.8013 8546.4375 -7817.6934 8546.4375 c
-7816.5854 8546.4375 -7815.6875 8547.3359 -7815.6875 8548.4434 c
f
0.74902 0.768002 0.307927 0.149447 0.329412 0.286275 0.447059 Xa
-7815.8354 8548.3672 m
-7815.8354 8549.3516 -7816.6333 8550.1484 -7817.6167 8550.1484 c
-7818.6011 8550.1484 -7819.3984 8549.3516 -7819.3984 8548.3672 c
-7819.3984 8547.3818 -7818.6011 8546.585 -7817.6167 8546.585 c
-7816.6333 8546.585 -7815.8354 8547.3818 -7815.8354 8548.3672 c
f
0.730343 0.674983 0.286107 0.098207 0.345098 0.34902 0.498039 Xa
-7815.9829 8548.291 m
-7815.9829 8549.1504 -7816.6802 8549.8477 -7817.54 8549.8477 c
-7818.4009 8549.8477 -7819.0972 8549.1504 -7819.0972 8548.291 c
-7819.0972 8547.4297 -7818.4009 8546.7344 -7817.54 8546.7344 c
-7816.6802 8546.7344 -7815.9829 8547.4297 -7815.9829 8548.291 c
f
0.706355 0.591241 0.255985 0.053925 0.364706 0.407843 0.552941 Xa
-7816.1313 8548.2139 m
-7816.1313 8548.9502 -7816.7275 8549.5469 -7817.4639 8549.5469 c
-7818.2002 8549.5469 -7818.7969 8548.9502 -7818.7969 8548.2139 c
-7818.7969 8547.4775 -7818.2002 8546.8809 -7817.4639 8546.8809 c
-7816.7275 8546.8809 -7816.1313 8547.4775 -7816.1313 8548.2139 c
f
0.674769 0.490669 0.218662 0.018524 0.384314 0.47451 0.615686 Xa
-7816.2788 8548.1367 m
-7816.2788 8548.75 -7816.7749 8549.2461 -7817.3872 8549.2461 c
-7818 8549.2461 -7818.4961 8548.75 -7818.4961 8548.1367 c
-7818.4961 8547.5254 -7818 8547.0293 -7817.3872 8547.0293 c
-7816.7749 8547.0293 -7816.2788 8547.5254 -7816.2788 8548.1367 c
f
0.64123 0.384558 0.172763 0.003479 0.4 0.545098 0.686275 Xa
-7816.4268 8548.0605 m
-7816.4268 8548.5498 -7816.8223 8548.9453 -7817.3115 8548.9453 c
-7817.7998 8548.9453 -7818.1958 8548.5498 -7818.1958 8548.0605 c
-7818.1958 8547.5723 -7817.7998 8547.1758 -7817.3115 8547.1758 c
-7816.8223 8547.1758 -7816.4268 8547.5723 -7816.4268 8548.0605 c
f
0.596033 0.266423 0.124788 0.000031 0.415686 0.623529 0.760784 Xa
-7816.5737 8547.9834 m
-7816.5737 8548.3496 -7816.8696 8548.6445 -7817.2344 8548.6445 c
-7817.5996 8548.6445 -7817.8955 8548.3496 -7817.8955 8547.9834 c
-7817.8955 8547.6191 -7817.5996 8547.3242 -7817.2344 8547.3242 c
-7816.8696 8547.3242 -7816.5737 8547.6191 -7816.5737 8547.9834 c
f
0.547051 0.146303 0.061738 0.000031 0.427451 0.701961 0.843137 Xa
-7816.7217 8547.9082 m
-7816.7217 8548.1484 -7816.9175 8548.3438 -7817.1582 8548.3438 c
-7817.3989 8548.3438 -7817.5942 8548.1484 -7817.5942 8547.9082 c
-7817.5942 8547.667 -7817.3989 8547.4727 -7817.1582 8547.4727 c
-7816.9175 8547.4727 -7816.7217 8547.667 -7816.7217 8547.9082 c
f
1 Ap
0.492195 0.014221 0.001282 0.000031 0.443137 0.803922 0.956863 Xa
-7816.8696 8547.832 m
-7816.8696 8547.9482 -7816.9648 8548.0439 -7817.0811 8548.0439 c
-7817.1987 8548.0439 -7817.2935 8547.9482 -7817.2935 8547.832 c
-7817.2935 8547.7148 -7817.1987 8547.6191 -7817.0811 8547.6191 c
-7816.9648 8547.6191 -7816.8696 8547.7148 -7816.8696 8547.832 c
f
U
/ShapeBlendPathID (A) XT
/ShapeBlendPathType (K) XT
U
u
u
0.784909 0.943603 0.343206 0.271733 0.290196 0.156863 0.352941 Xa
-7727.3481 8548.5186 m
-7727.3481 8550.6191 -7725.6465 8552.3223 -7723.5454 8552.3223 c
-7721.4458 8552.3223 -7719.7437 8550.6191 -7719.7437 8548.5186 c
-7719.7437 8546.4199 -7721.4458 8544.7178 -7723.5454 8544.7178 c
-7725.6465 8544.7178 -7727.3481 8546.4199 -7727.3481 8548.5186 c
f
0 Ap
0.770748 0.856626 0.326513 0.2056 0.309804 0.223529 0.4 Xa
-7720.3364 8548.3896 m
-7720.3364 8546.5 -7721.8315 8544.9697 -7723.6763 8544.9697 c
-7725.52 8544.9697 -7727.0161 8546.5 -7727.0161 8548.3896 c
-7727.0161 8550.2783 -7725.52 8551.8096 -7723.6763 8551.8096 c
-7721.8315 8551.8096 -7720.3364 8550.2783 -7720.3364 8548.3896 c
f
0.74902 0.768002 0.307927 0.149447 0.329412 0.286275 0.447059 Xa
-7720.9292 8548.2578 m
-7720.9292 8546.5811 -7722.2173 8545.2217 -7723.8071 8545.2217 c
-7725.3955 8545.2217 -7726.6831 8546.5811 -7726.6831 8548.2578 c
-7726.6831 8549.9375 -7725.3955 8551.2969 -7723.8071 8551.2969 c
-7722.2173 8551.2969 -7720.9292 8549.9375 -7720.9292 8548.2578 c
f
0.730343 0.674983 0.286107 0.098207 0.345098 0.34902 0.498039 Xa
-7721.5225 8548.1289 m
-7721.5225 8546.6621 -7722.6035 8545.4736 -7723.9375 8545.4736 c
-7725.27 8545.4736 -7726.3511 8546.6621 -7726.3511 8548.1289 c
-7726.3511 8549.5957 -7725.27 8550.7842 -7723.9375 8550.7842 c
-7722.6035 8550.7842 -7721.5225 8549.5957 -7721.5225 8548.1289 c
f
0.706355 0.591241 0.255985 0.053925 0.364706 0.407843 0.552941 Xa
-7722.1157 8547.998 m
-7722.1157 8546.7422 -7722.9888 8545.7256 -7724.0669 8545.7256 c
-7725.1455 8545.7256 -7726.0195 8546.7422 -7726.0195 8547.998 c
-7726.0195 8549.2529 -7725.1455 8550.2705 -7724.0669 8550.2705 c
-7722.9888 8550.2705 -7722.1157 8549.2529 -7722.1157 8547.998 c
f
0.674769 0.490669 0.218662 0.018524 0.384314 0.47451 0.615686 Xa
-7722.7085 8547.8672 m
-7722.7085 8546.8242 -7723.3755 8545.9775 -7724.1978 8545.9775 c
-7725.02 8545.9775 -7725.6875 8546.8242 -7725.6875 8547.8672 c
-7725.6875 8548.9121 -7725.02 8549.7578 -7724.1978 8549.7578 c
-7723.3755 8549.7578 -7722.7085 8548.9121 -7722.7085 8547.8672 c
f
0.64123 0.384558 0.172763 0.003479 0.4 0.545098 0.686275 Xa
-7723.3013 8547.7373 m
-7723.3013 8546.9033 -7723.7612 8546.2295 -7724.3276 8546.2295 c
-7724.8955 8546.2295 -7725.3545 8546.9033 -7725.3545 8547.7373 c
-7725.3545 8548.5703 -7724.8955 8549.2461 -7724.3276 8549.2461 c
-7723.7612 8549.2461 -7723.3013 8548.5703 -7723.3013 8547.7373 c
f
0.596033 0.266423 0.124788 0.000031 0.415686 0.623529 0.760784 Xa
-7723.8955 8547.6074 m
-7723.8955 8546.9854 -7724.1475 8546.4814 -7724.4585 8546.4814 c
-7724.77 8546.4814 -7725.0225 8546.9854 -7725.0225 8547.6074 c
-7725.0225 8548.2285 -7724.77 8548.7324 -7724.4585 8548.7324 c
-7724.1475 8548.7324 -7723.8955 8548.2285 -7723.8955 8547.6074 c
f
0.547051 0.146303 0.061738 0.000031 0.427451 0.701961 0.843137 Xa
-7724.4868 8547.4766 m
-7724.4868 8547.0664 -7724.5327 8546.7324 -7724.5894 8546.7324 c
-7724.6455 8546.7324 -7724.6899 8547.0664 -7724.6899 8547.4766 c
-7724.6899 8547.8857 -7724.6455 8548.2207 -7724.5894 8548.2207 c
-7724.5327 8548.2207 -7724.4868 8547.8857 -7724.4868 8547.4766 c
f
1 Ap
0.492195 0.014221 0.001282 0.000031 0.443137 0.803922 0.956863 Xa
-7725.0806 8547.3457 m
-7725.0806 8547.5449 -7724.9185 8547.708 -7724.7192 8547.708 c
-7724.52 8547.708 -7724.3579 8547.5449 -7724.3579 8547.3457 c
-7724.3579 8547.1465 -7724.52 8546.9854 -7724.7192 8546.9854 c
-7724.9185 8546.9854 -7725.0806 8547.1465 -7725.0806 8547.3457 c
f
U
/ShapeBlendPathID (B) XT
/ShapeBlendPathType (K) XT
u
0 Ap
0.784909 0.943603 0.343206 0.271733 0.290196 0.156863 0.352941 Xa
-7715.8955 8548.5186 m
-7715.8955 8550.4023 -7714.3696 8551.9297 -7712.4868 8551.9297 c
-7710.6045 8551.9297 -7709.0776 8550.4023 -7709.0776 8548.5186 c
-7709.0776 8546.6367 -7710.6045 8545.1113 -7712.4868 8545.1113 c
-7714.3696 8545.1113 -7715.8955 8546.6367 -7715.8955 8548.5186 c
f
0.770748 0.856626 0.326513 0.2056 0.309804 0.223529 0.4 Xa
-7715.6099 8548.4033 m
-7715.6099 8550.0967 -7714.2642 8551.4697 -7712.6045 8551.4697 c
-7710.9438 8551.4697 -7709.5981 8550.0967 -7709.5981 8548.4033 c
-7709.5981 8546.709 -7710.9438 8545.3369 -7712.6045 8545.3369 c
-7714.2642 8545.3369 -7715.6099 8546.709 -7715.6099 8548.4033 c
f
0.74902 0.768002 0.307927 0.149447 0.329412 0.286275 0.447059 Xa
-7715.3237 8548.2842 m
-7715.3237 8549.791 -7714.1577 8551.0098 -7712.7212 8551.0098 c
-7711.2827 8551.0098 -7710.1177 8549.791 -7710.1177 8548.2842 c
-7710.1177 8546.7813 -7711.2827 8545.5625 -7712.7212 8545.5625 c
-7714.1577 8545.5625 -7715.3237 8546.7813 -7715.3237 8548.2842 c
f
0.730343 0.674983 0.286107 0.098207 0.345098 0.34902 0.498039 Xa
-7715.0376 8548.168 m
-7715.0376 8549.4844 -7714.0532 8550.5498 -7712.8384 8550.5498 c
-7711.6216 8550.5498 -7710.6372 8549.4844 -7710.6372 8548.168 c
-7710.6372 8546.8535 -7711.6216 8545.7891 -7712.8384 8545.7891 c
-7714.0532 8545.7891 -7715.0376 8546.8535 -7715.0376 8548.168 c
f
0.706355 0.591241 0.255985 0.053925 0.364706 0.407843 0.552941 Xa
-7714.7515 8548.0518 m
-7714.7515 8549.1777 -7713.9468 8550.0898 -7712.9546 8550.0898 c
-7711.9614 8550.0898 -7711.1567 8549.1777 -7711.1567 8548.0518 c
-7711.1567 8546.9258 -7711.9614 8546.0146 -7712.9546 8546.0146 c
-7713.9468 8546.0146 -7714.7515 8546.9258 -7714.7515 8548.0518 c
f
0.674769 0.490669 0.218662 0.018524 0.384314 0.47451 0.615686 Xa
-7714.4653 8547.9346 m
-7714.4653 8548.8711 -7713.8413 8549.6309 -7713.0718 8549.6309 c
-7712.3013 8549.6309 -7711.6772 8548.8711 -7711.6772 8547.9346 c
-7711.6772 8546.999 -7712.3013 8546.2402 -7713.0718 8546.2402 c
-7713.8413 8546.2402 -7714.4653 8546.999 -7714.4653 8547.9346 c
f
0.64123 0.384558 0.172763 0.003479 0.4 0.545098 0.686275 Xa
-7714.1792 8547.8184 m
-7714.1792 8548.5645 -7713.7358 8549.1689 -7713.1885 8549.1689 c
-7712.6411 8549.1689 -7712.1968 8548.5645 -7712.1968 8547.8184 c
-7712.1968 8547.0723 -7712.6411 8546.4668 -7713.1885 8546.4668 c
-7713.7358 8546.4668 -7714.1792 8547.0723 -7714.1792 8547.8184 c
f
0.596033 0.266423 0.124788 0.000031 0.415686 0.623529 0.760784 Xa
-7713.8931 8547.7002 m
-7713.8931 8548.0762 -7713.6304 8548.3809 -7713.3052 8548.3809 c
-7712.9814 8548.3809 -7712.7173 8548.0762 -7712.7173 8547.7002 c
-7712.7173 8547.3262 -7712.9814 8547.0225 -7713.3052 8547.0225 c
-7713.6304 8547.0225 -7713.8931 8547.3262 -7713.8931 8547.7002 c
f
0.547051 0.146303 0.061738 0.000031 0.427451 0.701961 0.843137 Xa
-7713.6079 8547.584 m
-7713.6079 8547.9521 -7713.5239 8548.252 -7713.4224 8548.252 c
-7713.3198 8548.252 -7713.2368 8547.9521 -7713.2368 8547.584 c
-7713.2368 8547.2158 -7713.3198 8546.918 -7713.4224 8546.918 c
-7713.5239 8546.918 -7713.6079 8547.2158 -7713.6079 8547.584 c
f
0.492195 0.014221 0.001282 0.000031 0.443137 0.803922 0.956863 Xa
-7713.3208 8547.4668 m
-7713.3208 8547.2891 -7713.4185 8547.1445 -7713.5396 8547.1445 c
-7713.6597 8547.1445 -7713.7573 8547.2891 -7713.7573 8547.4668 c
-7713.7573 8547.6465 -7713.6597 8547.792 -7713.5396 8547.792 c
-7713.4185 8547.792 -7713.3208 8547.6465 -7713.3208 8547.4668 c
f
U
u
0.784909 0.943603 0.343206 0.271733 0.290196 0.156863 0.352941 Xa
-7704.4438 8548.5186 m
-7704.4438 8550.1855 -7703.0942 8551.5352 -7701.4282 8551.5352 c
-7699.7622 8551.5352 -7698.4116 8550.1855 -7698.4116 8548.5186 c
-7698.4116 8546.8535 -7699.7622 8545.5039 -7701.4282 8545.5039 c
-7703.0942 8545.5039 -7704.4438 8546.8535 -7704.4438 8548.5186 c
f
0.770748 0.856626 0.326513 0.2056 0.309804 0.223529 0.4 Xa
-7704.2036 8548.416 m
-7704.2036 8549.9141 -7703.0073 8551.1289 -7701.5317 8551.1289 c
-7700.0552 8551.1289 -7698.8589 8549.9141 -7698.8589 8548.416 c
-7698.8589 8546.918 -7700.0552 8545.7041 -7701.5317 8545.7041 c
-7703.0073 8545.7041 -7704.2036 8546.918 -7704.2036 8548.416 c
f
0.74902 0.768002 0.307927 0.149447 0.329412 0.286275 0.447059 Xa
-7703.9634 8548.3125 m
-7703.9634 8549.6445 -7702.9204 8550.7227 -7701.6353 8550.7227 c
-7700.3481 8550.7227 -7699.3052 8549.6445 -7699.3052 8548.3125 c
-7699.3052 8546.9824 -7700.3481 8545.9033 -7701.6353 8545.9033 c
-7702.9204 8545.9033 -7703.9634 8546.9824 -7703.9634 8548.3125 c
f
0.730343 0.674983 0.286107 0.098207 0.345098 0.34902 0.498039 Xa
-7703.7241 8548.209 m
-7703.7241 8549.373 -7702.8354 8550.3164 -7701.7388 8550.3164 c
-7700.6411 8550.3164 -7699.7524 8549.373 -7699.7524 8548.209 c
-7699.7524 8547.0469 -7700.6411 8546.1025 -7701.7388 8546.1025 c
-7702.8354 8546.1025 -7703.7241 8547.0469 -7703.7241 8548.209 c
f
0.706355 0.591241 0.255985 0.053925 0.364706 0.407843 0.552941 Xa
-7703.4839 8548.1055 m
-7703.4839 8549.1016 -7702.7485 8549.9082 -7701.8423 8549.9082 c
-7700.9341 8549.9082 -7700.1997 8549.1016 -7700.1997 8548.1055 c
-7700.1997 8547.1094 -7700.9341 8546.3018 -7701.8423 8546.3018 c
-7702.7485 8546.3018 -7703.4839 8547.1094 -7703.4839 8548.1055 c
f
0.674769 0.490669 0.218662 0.018524 0.384314 0.47451 0.615686 Xa
-7703.2446 8548.002 m
-7703.2446 8548.8311 -7702.6626 8549.502 -7701.9458 8549.502 c
-7701.2285 8549.502 -7700.6465 8548.8311 -7700.6465 8548.002 c
-7700.6465 8547.1738 -7701.2285 8546.5039 -7701.9458 8546.5039 c
-7702.6626 8546.5039 -7703.2446 8547.1738 -7703.2446 8548.002 c
f
0.64123 0.384558 0.172763 0.003479 0.4 0.545098 0.686275 Xa
-7703.0044 8547.8984 m
-7703.0044 8548.5605 -7702.5767 8549.0957 -7702.0483 8549.0957 c
-7701.5215 8549.0957 -7701.0923 8548.5605 -7701.0923 8547.8984 c
-7701.0923 8547.2383 -7701.5215 8546.7031 -7702.0483 8546.7031 c
-7702.5767 8546.7031 -7703.0044 8547.2383 -7703.0044 8547.8984 c
f
0.596033 0.266423 0.124788 0.000031 0.415686 0.623529 0.760784 Xa
-7702.7642 8547.7959 m
-7702.7642 8547.9238 -7702.4907 8548.0293 -7702.1519 8548.0293 c
-7701.8145 8548.0293 -7701.5396 8547.9238 -7701.5396 8547.7959 c
-7701.5396 8547.668 -7701.8145 8547.5625 -7702.1519 8547.5625 c
-7702.4907 8547.5625 -7702.7642 8547.668 -7702.7642 8547.7959 c
f
0.547051 0.146303 0.061738 0.000031 0.427451 0.701961 0.843137 Xa
-7702.5239 8547.6924 m
-7702.5239 8548.0176 -7702.4038 8548.2832 -7702.2554 8548.2832 c
-7702.1069 8548.2832 -7701.9868 8548.0176 -7701.9868 8547.6924 c
-7701.9868 8547.3672 -7702.1069 8547.1025 -7702.2554 8547.1025 c
-7702.4038 8547.1025 -7702.5239 8547.3672 -7702.5239 8547.6924 c
f
0.492195 0.014221 0.001282 0.000031 0.443137 0.803922 0.956863 Xa
-7702.2837 8547.5889 m
-7702.2837 8547.4316 -7702.3179 8547.3018 -7702.3589 8547.3018 c
-7702.3999 8547.3018 -7702.4341 8547.4316 -7702.4341 8547.5889 c
-7702.4341 8547.748 -7702.3999 8547.876 -7702.3589 8547.876 c
-7702.3179 8547.876 -7702.2837 8547.748 -7702.2837 8547.5889 c
f
U
u
0.784909 0.943603 0.343206 0.271733 0.290196 0.156863 0.352941 Xa
-7692.9917 8548.5186 m
-7692.9917 8549.9688 -7691.8179 8551.1426 -7690.3696 8551.1426 c
-7688.9204 8551.1426 -7687.7466 8549.9688 -7687.7466 8548.5186 c
-7687.7466 8547.0703 -7688.9204 8545.8975 -7690.3696 8545.8975 c
-7691.8179 8545.8975 -7692.9917 8547.0703 -7692.9917 8548.5186 c
f
0.770748 0.856626 0.326513 0.2056 0.309804 0.223529 0.4 Xa
-7692.7974 8548.4297 m
-7692.7974 8549.7324 -7691.7505 8550.7891 -7690.4595 8550.7891 c
-7689.1665 8550.7891 -7688.1196 8549.7324 -7688.1196 8548.4297 c
-7688.1196 8547.127 -7689.1665 8546.0703 -7690.4595 8546.0703 c
-7691.7505 8546.0703 -7692.7974 8547.127 -7692.7974 8548.4297 c
f
0.74902 0.768002 0.307927 0.149447 0.329412 0.286275 0.447059 Xa
-7692.6045 8548.3398 m
-7692.6045 8549.498 -7691.6841 8550.4346 -7690.5493 8550.4346 c
-7689.4136 8550.4346 -7688.4937 8549.498 -7688.4937 8548.3398 c
-7688.4937 8547.1826 -7689.4136 8546.2441 -7690.5493 8546.2441 c
-7691.6841 8546.2441 -7692.6045 8547.1826 -7692.6045 8548.3398 c
f
0.730343 0.674983 0.286107 0.098207 0.345098 0.34902 0.498039 Xa
-7692.4106 8548.25 m
-7692.4106 8549.2617 -7691.6177 8550.082 -7690.6392 8550.082 c
-7689.6606 8550.082 -7688.8677 8549.2617 -7688.8677 8548.25 c
-7688.8677 8547.2383 -7689.6606 8546.4189 -7690.6392 8546.4189 c
-7691.6177 8546.4189 -7692.4106 8547.2383 -7692.4106 8548.25 c
f
0.706355 0.591241 0.255985 0.053925 0.364706 0.407843 0.552941 Xa
-7692.2163 8548.1602 m
-7692.2163 8549.0254 -7691.5513 8549.7285 -7690.7295 8549.7285 c
-7689.9067 8549.7285 -7689.2407 8549.0254 -7689.2407 8548.1602 c
-7689.2407 8547.293 -7689.9067 8546.5918 -7690.7295 8546.5918 c
-7691.5513 8546.5918 -7692.2163 8547.293 -7692.2163 8548.1602 c
f
0.674769 0.490669 0.218662 0.018524 0.384314 0.47451 0.615686 Xa
-7692.0229 8548.0703 m
-7692.0229 8548.791 -7691.4839 8549.375 -7690.8188 8549.375 c
-7690.1538 8549.375 -7689.6157 8548.791 -7689.6157 8548.0703 c
-7689.6157 8547.3496 -7690.1538 8546.7656 -7690.8188 8546.7656 c
-7691.4839 8546.7656 -7692.0229 8547.3496 -7692.0229 8548.0703 c
f
0.64123 0.384558 0.172763 0.003479 0.4 0.545098 0.686275 Xa
-7691.8286 8547.9805 m
-7691.8286 8548.5537 -7691.4165 8549.0205 -7690.9087 8549.0205 c
-7690.4009 8549.0205 -7689.9888 8548.5537 -7689.9888 8547.9805 c
-7689.9888 8547.4063 -7690.4009 8546.9395 -7690.9087 8546.9395 c
-7691.4165 8546.9395 -7691.8286 8547.4063 -7691.8286 8547.9805 c
f
0.596033 0.266423 0.124788 0.000031 0.415686 0.623529 0.760784 Xa
-7691.6353 8547.8906 m
-7691.6353 8547.7705 -7691.3501 8547.6758 -7690.9985 8547.6758 c
-7690.6475 8547.6758 -7690.3618 8547.7705 -7690.3618 8547.8906 c
-7690.3618 8548.0078 -7690.6475 8548.1025 -7690.9985 8548.1025 c
-7691.3501 8548.1025 -7691.6353 8548.0078 -7691.6353 8547.8906 c
f
0.547051 0.146303 0.061738 0.000031 0.427451 0.701961 0.843137 Xa
-7691.4419 8547.8008 m
-7691.4419 8548.084 -7691.2837 8548.3135 -7691.0884 8548.3135 c
-7690.8945 8548.3135 -7690.7368 8548.084 -7690.7368 8547.8008 c
-7690.7368 8547.5166 -7690.8945 8547.2871 -7691.0884 8547.2871 c
-7691.2837 8547.2871 -7691.4419 8547.5166 -7691.4419 8547.8008 c
f
0.492195 0.014221 0.001282 0.000031 0.443137 0.803922 0.956863 Xa
-7691.2476 8547.7109 m
-7691.2476 8547.5723 -7691.2173 8547.4609 -7691.1792 8547.4609 c
-7691.1411 8547.4609 -7691.1099 8547.5723 -7691.1099 8547.7109 c
-7691.1099 8547.8477 -7691.1411 8547.96 -7691.1792 8547.96 c
-7691.2173 8547.96 -7691.2476 8547.8477 -7691.2476 8547.7109 c
f
U
u
1 Ap
0.784909 0.943603 0.343206 0.271733 0.290196 0.156863 0.352941 Xa
-7681.5396 8548.5186 m
-7681.5396 8549.752 -7680.5415 8550.75 -7679.3115 8550.75 c
-7678.0786 8550.75 -7677.0806 8549.752 -7677.0806 8548.5186 c
-7677.0806 8547.2881 -7678.0786 8546.291 -7679.3115 8546.291 c
-7680.5415 8546.291 -7681.5396 8547.2881 -7681.5396 8548.5186 c
f
0 Ap
0.770748 0.856626 0.326513 0.2056 0.309804 0.223529 0.4 Xa
-7681.3921 8548.4434 m
-7681.3921 8549.5498 -7680.4946 8550.4492 -7679.3872 8550.4492 c
-7678.2788 8550.4492 -7677.3813 8549.5498 -7677.3813 8548.4434 c
-7677.3813 8547.3359 -7678.2788 8546.4375 -7679.3872 8546.4375 c
-7680.4946 8546.4375 -7681.3921 8547.3359 -7681.3921 8548.4434 c
f
0.74902 0.768002 0.307927 0.149447 0.329412 0.286275 0.447059 Xa
-7681.2446 8548.3672 m
-7681.2446 8549.3516 -7680.4468 8550.1484 -7679.4634 8550.1484 c
-7678.4795 8550.1484 -7677.6821 8549.3516 -7677.6821 8548.3672 c
-7677.6821 8547.3818 -7678.4795 8546.585 -7679.4634 8546.585 c
-7680.4468 8546.585 -7681.2446 8547.3818 -7681.2446 8548.3672 c
f
0.730343 0.674983 0.286107 0.098207 0.345098 0.34902 0.498039 Xa
-7681.0972 8548.291 m
-7681.0972 8549.1504 -7680.3999 8549.8477 -7679.5396 8549.8477 c
-7678.6792 8549.8477 -7677.9829 8549.1504 -7677.9829 8548.291 c
-7677.9829 8547.4297 -7678.6792 8546.7344 -7679.5396 8546.7344 c
-7680.3999 8546.7344 -7681.0972 8547.4297 -7681.0972 8548.291 c
f
0.706355 0.591241 0.255985 0.053925 0.364706 0.407843 0.552941 Xa
-7680.9487 8548.2139 m
-7680.9487 8548.9502 -7680.3521 8549.5469 -7679.6157 8549.5469 c
-7678.8794 8549.5469 -7678.2837 8548.9502 -7678.2837 8548.2139 c
-7678.2837 8547.4775 -7678.8794 8546.8809 -7679.6157 8546.8809 c
-7680.3521 8546.8809 -7680.9487 8547.4775 -7680.9487 8548.2139 c
f
0.674769 0.490669 0.218662 0.018524 0.384314 0.47451 0.615686 Xa
-7680.8013 8548.1367 m
-7680.8013 8548.75 -7680.3052 8549.2461 -7679.6929 8549.2461 c
-7679.0806 8549.2461 -7678.5845 8548.75 -7678.5845 8548.1367 c
-7678.5845 8547.5254 -7679.0806 8547.0293 -7679.6929 8547.0293 c
-7680.3052 8547.0293 -7680.8013 8547.5254 -7680.8013 8548.1367 c
f
0.64123 0.384558 0.172763 0.003479 0.4 0.545098 0.686275 Xa
-7680.6528 8548.0605 m
-7680.6528 8548.5498 -7680.2583 8548.9453 -7679.7695 8548.9453 c
-7679.2798 8548.9453 -7678.8843 8548.5498 -7678.8843 8548.0605 c
-7678.8843 8547.5723 -7679.2798 8547.1758 -7679.7695 8547.1758 c
-7680.2583 8547.1758 -7680.6528 8547.5723 -7680.6528 8548.0605 c
f
0.596033 0.266423 0.124788 0.000031 0.415686 0.623529 0.760784 Xa
-7680.5063 8547.9834 m
-7680.5063 8548.3496 -7680.2104 8548.6445 -7679.8462 8548.6445 c
-7679.4814 8548.6445 -7679.1851 8548.3496 -7679.1851 8547.9834 c
-7679.1851 8547.6191 -7679.4814 8547.3242 -7679.8462 8547.3242 c
-7680.2104 8547.3242 -7680.5063 8547.6191 -7680.5063 8547.9834 c
f
0.547051 0.146303 0.061738 0.000031 0.427451 0.701961 0.843137 Xa
-7680.3579 8547.9082 m
-7680.3579 8548.1484 -7680.1626 8548.3438 -7679.9224 8548.3438 c
-7679.6812 8548.3438 -7679.4858 8548.1484 -7679.4858 8547.9082 c
-7679.4858 8547.667 -7679.6812 8547.4727 -7679.9224 8547.4727 c
-7680.1626 8547.4727 -7680.3579 8547.667 -7680.3579 8547.9082 c
f
1 Ap
0.492195 0.014221 0.001282 0.000031 0.443137 0.803922 0.956863 Xa
-7680.2104 8547.832 m
-7680.2104 8547.9482 -7680.1157 8548.0439 -7679.9985 8548.0439 c
-7679.8813 8548.0439 -7679.7866 8547.9482 -7679.7866 8547.832 c
-7679.7866 8547.7148 -7679.8813 8547.6191 -7679.9985 8547.6191 c
-7680.1157 8547.6191 -7680.2104 8547.7148 -7680.2104 8547.832 c
f
U
/ShapeBlendPathID (A) XT
/ShapeBlendPathType (K) XT
U
0 Ap
-7734.3306 8548.4727 m
-7734.3306 8549.8008 -7740.7075 8551.2813 -7749.8589 8551.2813 c
-7759.0103 8551.2813 -7765.3892 8549.8008 -7765.3892 8548.4727 C
-7765.8843 8548.4727 L
-7765.8843 8550.6191 -7757.6284 8551.7773 -7749.8589 8551.7773 c
-7742.0903 8551.7773 -7732.1138 8550.6191 -7732.1138 8548.4727 C
-7734.3306 8548.4727 L
f
-7760.3296 8535.4023 m
-7759.0415 8536.6914 L
-7758.6772 8536.3281 -7758.2485 8535.6641 -7755.4966 8537.5234 c
-7752.9946 8539.2129 -7749.9814 8541.7793 -7747.0122 8544.748 c
-7744.0435 8547.7168 -7741.4771 8550.7305 -7739.7856 8553.2314 c
-7737.9272 8555.9834 -7737.6548 8557.3516 -7738.0161 8557.7148 C
-7737.6665 8558.0654 L
-7736.1489 8556.5469 -7741.1685 8549.8906 -7746.6626 8544.3984 c
-7749.6519 8541.4063 -7752.6919 8538.8193 -7755.2192 8537.1113 c
-7757.9204 8535.2871 -7759.6392 8534.7129 -7760.3296 8535.4023 C
f
-7737.2695 8536.1689 m
-7736.9067 8536.5322 -7737.1802 8537.9004 -7739.0396 8540.6514 c
-7740.7295 8543.1543 -7743.2954 8546.168 -7746.2642 8549.1367 c
-7752.7358 8555.6094 -7757.5884 8558.3682 -7758.5278 8557.4277 C
-7759.5815 8558.4824 L
-7758.0649 8560 -7749.5298 8553.1025 -7745.9146 8549.4863 c
-7742.9243 8546.4971 -7740.3364 8543.457 -7738.6294 8540.9297 c
-7736.8042 8538.2285 -7736.2295 8536.5098 -7736.9185 8535.8193 C
-7737.2695 8536.1689 L
f
U
U
%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ 2 pt. Oval/ Adobe Calligraphic) -
( Brush Tool/ 5 pt. Oval/ Adobe Calligraphic Brush Tool/ 5 pt. ) -
(Flat/ Adobe Calligraphic Brush Tool/ 3 pt. Round/ Adobe Callig) -
(raphic Brush Tool/ 7 pt. Round/ Adobe Calligraphic Brush Tool/) -
( 15 pt. Round/ Adobe ArtOnPath Brush Tool/ Charcoal/ Adobe Art) -
(OnPath Brush Tool/ Text Divider/ Adobe ArtOnPath Brush Tool/ T) -
(apered Stroke/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(15 pt. Round)
(1 15 15 100 100 15 15 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(2 pt. Oval)
(1 2 2 26 74 15 15 0 1 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(3 pt. Round)
(1 3 3 100 100 0 0 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 pt. Flat)
(1 5 5 0 0 90 90 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 pt. Oval)
(1 5 5 10 90 -65 35 0 1 1 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(7 pt. Round)
(1 7 7 100 100 0 0 0 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Charcoal)
(1 / Unnamed Brush Pat 2/ / / / / 0 1 /  1 1 1.2 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Tapered Stroke)
(1 / Unnamed 20/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Text Divider)
(1 / Unnamed Brush Pattern 6/ / / / / 5 0.176471 0.027451 0.247) -
(059 /  1 0 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.75021 0.679683 0.670222 0.90164 ([Registration]) 0 Xs
([Registration])
Pc
0.000031 0.000031 0.000031 0.000031 1 1 1 Xa
(White)
Pc
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
(Black)
Pc
0.000031 0.993988 1 0.000031 1 0 0 Xa
(RGB Red)
Pc
0.061982 0.000031 0.965148 0.000031 1 1 0 Xa
(RGB Yellow)
Pc
0.627649 0.000031 1 0.000031 0 1 0 Xa
(RGB Green)
Pc
0.517937 0.000031 0.125399 0.000031 0 1 1 Xa
(RGB Cyan)
Pc
0.883665 0.769161 0.000031 0.000031 0 0 1 Xa
(RGB Blue)
Pc
0.269902 0.816403 0.000031 0.000031 1 0 1 Xa
(RGB Magenta)
Pc
0.169619 0.978973 0.927245 0.067445 0.756863 0.152941 0.176471 Xa
(R=193 G=39 B=45)
Pc
0.004456 0.991424 0.973236 0.000946 0.929412 0.109804 0.141176 Xa
(R=237 G=28 B=36)
Pc
0.000031 0.798032 0.968749 0.000122 0.945098 0.352941 0.141176 Xa
(R=241 G=90 B=36)
Pc
0.000366 0.500664 0.985656 0.000031 0.968627 0.576471 0.117647 Xa
(R=247 G=147 B=30)
Pc
0.000214 0.348486 0.871305 0.000031 0.984314 0.690196 0.231373 Xa
(R=251 G=176 B=59)
Pc
0.045136 0.000031 0.931884 0.000031 0.988235 0.933333 0.129412 Xa
(R=252 G=238 B=33)
Pc
0.188968 0.000397 0.98233 0.000031 0.85098 0.878431 0.129412 Xa
(R=217 G=224 B=33)
Pc
0.501091 0.001373 0.990387 0.000031 0.54902 0.776471 0.247059 Xa
(R=140 G=198 B=63)
Pc
0.746151 0.000031 0.99704 0.000092 0.223529 0.709804 0.290196 Xa
(R=57 G=181 B=74)
Pc
0.863859 0.175784 1 0.038239 0 0.572549 0.270588 Xa
(R=0 G=146 B=69)
Pc
0.90219 0.334752 0.98764 0.260655 0 0.407843 0.215686 Xa
(R=0 G=104 B=55)
Pc
0.761959 0.000031 0.749783 0.000031 0.133333 0.709804 0.45098 Xa
(R=34 G=181 B=115)
Pc
0.78442 0.090852 0.457557 0.000275 0 0.662745 0.615686 Xa
(R=0 G=169 B=157)
Pc
0.6972 0.14847 0.000031 0.000031 0.160784 0.670588 0.886275 Xa
(R=41 G=171 B=226)
Pc
0.875364 0.526451 0.000031 0.000031 0 0.443137 0.737255 Xa
(R=0 G=113 B=188)
Pc
0.991302 0.965484 0.034943 0.005005 0.180392 0.192157 0.572549 Xa
(R=46 G=49 B=146)
Pc
1 1 0.262547 0.245243 0.105882 0.078431 0.392157 Xa
(R=27 G=20 B=100)
Pc
0.745205 0.985168 0.0094 0.002289 0.4 0.176471 0.568627 Xa
(R=102 G=45 B=145)
Pc
0.495582 0.991913 0.013703 0.001099 0.576471 0.152941 0.560784 Xa
(R=147 G=39 B=143)
Pc
0.348913 1 0.372045 0.108156 0.619608 0 0.364706 Xa
(R=158 G=0 B=93)
Pc
0.118441 1 0.4925 0.008728 0.831373 0.078431 0.352941 Xa
(R=212 G=20 B=90)
Pc
0.000031 0.970001 0.204959 0.000031 0.929412 0.117647 0.47451 Xa
(R=237 G=30 B=121)
Pc
0.22855 0.274266 0.39942 0.000031 0.780392 0.698039 0.6 Xa
(R=199 G=178 B=153)
Pc
0.398444 0.428534 0.525292 0.068086 0.6 0.52549 0.458824 Xa
(R=153 G=134 B=117)
Pc
0.50399 0.531365 0.608972 0.235935 0.45098 0.388235 0.341176 Xa
(R=115 G=99 B=87)
Pc
0.575982 0.60415 0.637385 0.419348 0.32549 0.278431 0.254902 Xa
(R=83 G=71 B=65)
Pc
0.226719 0.383947 0.636683 0.01181 0.776471 0.611765 0.427451 Xa
(R=198 G=156 B=109)
Pc
0.315953 0.491829 0.739315 0.098909 0.65098 0.486275 0.321569 Xa
(R=166 G=124 B=82)
Pc
0.362341 0.574029 0.840574 0.226169 0.54902 0.384314 0.223529 Xa
(R=140 G=98 B=57)
Pc
0.391699 0.641047 0.934417 0.35581 0.458824 0.298039 0.141176 Xa
(R=117 G=76 B=36)
Pc
0.415381 0.699947 0.970245 0.491554 0.376471 0.219608 0.07451 Xa
(R=96 G=56 B=19)
Pc
0.477943 0.734768 0.837125 0.681575 0.258824 0.129412 0.043137 Xa
(R=66 G=33 B=11)
Pc
Bb
0 0 0 0 Bh
2 (Soft Black Vignette) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Soft Black Vignette)
Pc
Bb
2 (Fade to White) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Fade to White)
Pc
Bb
2 (Linear Gradient) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Linear Gradient)
Pc
Bb
2 (Green Gradient) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Green Gradient)
Pc
Bb
0 0 0 0 Bh
2 (Blue Radial Gradient) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Blue Radial Gradient)
Pc
(Squares Angled) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Squares Angled)
Pc
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
(R=0 G=0 B=0)
Pc
0.725765 0.66601 0.651911 0.781613 0.101961 0.101961 0.101961 Xa
(R=26 G=26 B=26)
Pc
0.69482 0.6318 0.621515 0.583612 0.2 0.2 0.2 Xa
(R=51 G=51 B=51)
Pc
0.653773 0.579889 0.56878 0.366613 0.301961 0.301961 0.301961 Xa
(R=77 G=77 B=77)
Pc
0.597284 0.512352 0.507713 0.201328 0.4 0.4 0.4 Xa
(R=102 G=102 B=102)
Pc
0.516472 0.431495 0.431495 0.075471 0.501961 0.501961 0.501961 Xa
(R=128 G=128 B=128)
Pc
0.426368 0.347875 0.353155 0.009857 0.6 0.6 0.6 Xa
(R=153 G=153 B=153)
Pc
0.306798 0.242466 0.247654 0.000031 0.701961 0.701961 0.701961 Xa
(R=179 G=179 B=179)
Pc
0.193668 0.150057 0.155337 0.000031 0.8 0.8 0.8 Xa
(R=204 G=204 B=204)
Pc
0.084596 0.061311 0.065766 0.000031 0.901961 0.901961 0.901961 Xa
(R=230 G=230 B=230)
Pc
0.037049 0.025086 0.025086 0.000031 0.94902 0.94902 0.94902 Xa
(R=242 G=242 B=242)
Pc
0.6318 0.219425 0.000031 0.000031 0.247059 0.662745 0.960784 Xa
(R=63 G=169 B=245)
Pc
0.55407 0.000031 0.965515 0.000031 0.478431 0.788235 0.262745 Xa
(R=122 G=201 B=67)
Pc
0.000031 0.508354 0.961639 0.000031 1 0.576471 0.117647 Xa
(R=255 G=147 B=30)
Pc
0.000031 0.965057 0.900572 0.000031 1 0.113725 0.145098 Xa
(R=255 G=29 B=37)
Pc
0.000031 0.661738 0.032776 0.000031 1 0.482353 0.67451 Xa
(R=255 G=123 B=172)
Pc
0.253758 0.127169 0.116762 0.000031 0.741176 0.8 0.831373 Xa
(R=189 G=204 B=212)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 1 255 79 79 0 50 Lb
(Layer 2) Ln
0 A
0 O
0.597284 0.512352 0.507713 0.201328 0.4 0.4 0.4 Xa
0 J 0 j 1 w 4 M []0 d0 XR
614.9502 623.4971 m
593.2119 623.4971 575.5908 641.1191 575.5908 662.8555 C
575.5908 684.5938 593.2119 702.2148 614.9502 702.2148 C
636.6865 702.2148 654.3096 684.5938 654.3096 662.8555 C
654.3096 641.1191 636.6865 623.4971 614.9502 623.4971 C
f
1 D
0.462135 0.006287 1 0.000031 0.596078 0.784314 0.035294 Xa
614.9502 612.4648 m
574.2998 612.4648 543.1807 577.958 543.1807 538.0625 C
543.1807 533.0918 547.21 529.0625 552.1807 529.0625 C
569.1748 529.0625 L
569.1748 550.5273 L
569.1748 554.6699 572.5322 558.0278 576.6748 558.0278 C
580.8174 558.0278 584.1748 554.6699 584.1748 550.5273 C
584.1748 529.0625 L
645.7256 529.0625 L
645.7256 550.5273 L
645.7256 554.6699 649.083 558.0278 653.2256 558.0278 C
657.3672 558.0278 660.7256 554.6699 660.7256 550.5273 C
660.7256 529.0625 L
677.7197 529.0625 L
682.6904 529.0625 686.7197 533.0918 686.7197 538.0625 C
686.7197 579.0879 654.5234 612.4648 614.9502 612.4648 C
f
0 D
0.597284 0.512352 0.507713 0.201328 0.4 0.4 0.4 Xa
364.5508 623.4976 m
342.812 623.4976 325.1909 641.1191 325.1909 662.856 C
325.1909 684.5938 342.812 702.2148 364.5508 702.2148 C
386.2871 702.2148 403.9102 684.5938 403.9102 662.856 C
403.9102 641.1191 386.2871 623.4976 364.5508 623.4976 C
f
1 D
364.8965 562.8823 m
364.8965 581.5054 375.4258 598.4639 392.0879 606.7612 C
383.6035 610.4297 374.3027 612.4648 364.5508 612.4648 C
324.9761 612.4648 292.7803 579.0879 292.7803 538.063 C
292.7803 533.0918 296.8096 529.063 301.7803 529.063 C
378.457 529.063 L
370.0625 537.8574 364.8965 549.7627 364.8965 562.8823 C
f
*u
413.8965 596.8818 m
395.1172 596.8818 379.8965 581.6597 379.8965 562.8823 c
379.8965 544.1045 395.1172 528.8818 413.8965 528.8818 c
432.6738 528.8818 447.8965 544.1045 447.8965 562.8823 c
447.8965 581.6597 432.6738 596.8818 413.8965 596.8818 c
f
0 D
431.8965 555.3818 m
395.8965 555.3818 L
391.7539 555.3818 388.3965 558.7397 388.3965 562.8823 c
388.3965 567.0239 391.7539 570.3818 395.8965 570.3818 C
431.8965 570.3818 L
436.0371 570.3818 439.3965 567.0239 439.3965 562.8823 c
439.3965 558.7397 436.0371 555.3818 431.8965 555.3818 C
f
*U
119.521 623.4971 m
97.7837 623.4971 80.1621 641.1191 80.1621 662.8555 C
80.1621 684.5938 97.7837 702.2148 119.521 702.2148 C
141.2583 702.2148 158.8804 684.5938 158.8804 662.8555 C
158.8804 641.1191 141.2583 623.4971 119.521 623.4971 C
f
1 D
119.8667 562.8818 m
119.8667 581.5049 130.396 598.4639 147.0581 606.7607 C
138.5737 610.4297 129.2729 612.4648 119.521 612.4648 C
79.9473 612.4648 47.7515 579.0879 47.7515 538.0625 C
47.7515 533.0918 51.7808 529.0625 56.7515 529.0625 C
133.4282 529.0625 L
125.0327 537.8574 119.8667 549.7632 119.8667 562.8818 C
f
*u
0.462135 0.006287 1 0.000031 0.596078 0.784314 0.035294 Xa
168.8667 596.8818 m
150.0884 596.8818 134.8667 581.6602 134.8667 562.8818 c
134.8667 544.104 150.0884 528.8818 168.8667 528.8818 c
187.644 528.8818 202.8667 544.104 202.8667 562.8818 c
202.8667 581.6602 187.644 596.8818 168.8667 596.8818 c
f
0 D
186.8667 555.3818 m
176.3667 555.3818 L
176.3667 544.8818 L
176.3667 540.7397 173.0093 537.3818 168.8667 537.3818 c
164.7241 537.3818 161.3667 540.7397 161.3667 544.8818 C
161.3667 555.3818 L
150.8667 555.3818 L
146.7241 555.3818 143.3667 558.7397 143.3667 562.8818 c
143.3667 567.0239 146.7241 570.3818 150.8667 570.3818 C
161.3667 570.3818 L
161.3667 580.8818 L
161.3667 585.0239 164.7241 588.3818 168.8667 588.3818 c
173.0093 588.3818 176.3667 585.0239 176.3667 580.8818 C
176.3667 570.3818 L
186.8667 570.3818 L
191.0093 570.3818 194.3667 567.0239 194.3667 562.8818 c
194.3667 558.7397 191.0093 555.3818 186.8667 555.3818 C
f
*U
0.597284 0.512352 0.507713 0.201328 0.4 0.4 0.4 Xa
609.1621 134.7393 m
587.4258 134.7393 569.8037 152.3613 569.8037 174.0977 C
569.8037 195.8359 587.4258 213.457 609.1621 213.457 C
630.9004 213.457 648.5215 195.8359 648.5215 174.0977 C
648.5215 152.3613 630.9004 134.7393 609.1621 134.7393 C
f
1 D
636.7002 118.0029 m
628.2148 121.6719 618.915 123.707 609.1621 123.707 C
569.5889 123.707 537.3926 90.3301 537.3926 49.3047 C
537.3926 44.334 541.4219 40.3047 546.3926 40.3047 C
623.0693 40.3047 L
600.4229 64.0283 607.1055 103.2666 636.7002 118.0029 C
f
*u
0.462135 0.006287 1 0.000031 0.596078 0.784314 0.035294 Xa
658.5078 108.124 m
639.7305 108.124 624.5078 92.9014 624.5078 74.124 c
624.5078 55.3467 639.7305 40.124 658.5078 40.124 c
677.2861 40.124 692.5078 55.3467 692.5078 74.124 c
692.5078 92.9014 677.2861 108.124 658.5078 108.124 c
f
0 D
677.7461 83.126 m
663.1758 57.6709 L
660.6445 53.2471 654.502 52.6055 651.1025 56.3682 C
640.2158 68.416 L
633.6094 75.7256 644.7393 85.7852 651.3447 78.4727 C
655.2969 74.0996 L
664.7266 90.5771 L
669.624 99.1328 682.6484 91.6904 677.7461 83.126 C
f
*U
*u
1 D
0.597284 0.512352 0.507713 0.201328 0.4 0.4 0.4 Xa
125.3091 446.7124 m
82.2319 446.7124 47.3091 411.791 47.3091 368.7129 C
47.3091 325.6348 82.2319 290.7129 125.3091 290.7129 C
168.3862 290.7129 203.3091 325.6348 203.3091 368.7129 C
203.3091 411.791 168.3862 446.7124 125.3091 446.7124 C
f
0 D
135.4175 324.9268 m
115.2021 324.9268 L
115.2021 389.9609 L
135.4175 389.9609 L
135.4175 324.9268 L
f
125.1768 397.9414 m
119.2598 397.9414 114.6699 402.0117 114.6699 408.0488 C
114.6699 413.7676 118.9258 418.1563 125.4429 418.1563 C
131.9595 418.1563 135.9492 413.7676 136.0825 408.0488 C
136.0825 402.4629 131.9595 397.9414 125.1768 397.9414 C
f
*U
0.462135 0.006287 1 0.000031 0.596078 0.784314 0.035294 Xa
694.5303 320.6396 m
699.0078 314.7285 694.7725 306.2041 687.3574 306.2041 C
677.4131 306.2041 660.2344 308.5684 648.4492 316.5693 C
653.3193 320.6602 657.4941 325.1748 660.9238 330.0264 C
663.9434 328.4336 667.6738 327.127 671.6426 326.1602 C
667.3799 339.3984 668.9297 352.1992 674.9219 357.6152 C
683.1182 365.0234 687.4502 375.3203 687.4502 387.3916 C
687.4502 411.751 663.5293 431.5693 634.126 431.5693 C
629.2441 431.5693 624.1816 430.7876 619.1348 429.3149 C
610.1934 432.0825 600.6514 433.5459 590.8594 433.5459 C
586.7266 433.5459 599.4307 440.7422 600.5957 441.3208 C
611.4619 446.7168 623.0566 449.5693 634.126 449.5693 C
673.4541 449.5693 705.4502 421.6763 705.4502 387.3916 C
705.4502 370.457 699.3359 355.8105 687.7549 344.9629 C
686.8594 342.0654 686.5254 331.2041 694.5303 320.6396 C
f
*u
1 D
0.597284 0.512352 0.507713 0.201328 0.4 0.4 0.4 Xa
590.8594 418.5449 m
554.1816 418.5449 524.4502 394.5918 524.4502 365.0449 c
524.4502 348.4766 533.8027 333.6699 548.4824 323.8574 C
548.9287 316.166 546.4814 306.4658 543.4805 301.4336 c
538.7617 293.5176 547.6113 284.0752 556.3506 289.418 c
565.0195 294.7119 575.1816 300.9287 580.3027 312.2266 C
613.6016 307.9453 657.2676 326.8164 657.2676 365.0449 c
657.2676 394.5918 627.5361 418.5449 590.8594 418.5449 c
f
0 D
569.0605 340.1309 m
564.9199 340.1309 561.5615 343.4883 561.5615 347.6299 c
561.5615 351.7734 564.9199 355.1309 569.0605 355.1309 c
573.2031 355.1309 576.5605 351.7725 576.5605 347.6299 c
576.5605 343.4883 573.2031 340.1309 569.0605 340.1309 c
f
593.7744 340.1309 m
589.6328 340.1309 586.2754 343.4883 586.2754 347.6299 c
586.2754 351.7734 589.6328 355.1309 593.7744 355.1309 c
597.917 355.1309 601.2754 351.7725 601.2754 347.6299 c
601.2754 343.4883 597.917 340.1309 593.7744 340.1309 c
f
618.4883 340.1309 m
614.3457 340.1309 610.9883 343.4883 610.9883 347.6299 c
610.9883 351.7734 614.3457 355.1289 618.4883 355.1289 c
622.6309 355.1289 625.9883 351.7725 625.9883 347.6299 c
625.9883 343.4883 622.6299 340.1309 618.4883 340.1309 c
f
*U
*u
1 D
210.6777 171.3662 m
209.2002 178.334 200.5464 180.8984 195.5098 175.8633 C
166.8794 147.2334 L
145.751 168.3613 L
174.3823 196.9922 L
179.4189 202.0293 176.8535 210.6836 169.8853 212.1611 C
152.3198 215.8838 134.1333 210.5713 121.3804 197.8154 C
107.521 183.957 102.4771 163.6357 108.1147 144.9541 C
46.0942 82.9326 L
36.3301 73.1689 36.3306 57.3398 46.0942 47.5781 C
55.8564 37.8145 71.6855 37.8135 81.4482 47.5781 C
143.4688 109.5977 L
162.1489 103.958 182.4756 109.0039 196.3335 122.8623 C
209.0576 135.5859 214.4199 153.7188 210.6777 171.3662 C
f
0 D
70.438 59.1934 m
66.9229 55.6777 61.2256 55.6797 57.71 59.1934 C
54.1953 62.709 54.1948 68.4063 57.7095 71.9219 C
61.2256 75.4365 66.9229 75.4355 70.438 71.9219 C
73.9521 68.4072 73.9526 62.709 70.438 59.1934 C
f
*U
402.3506 143.4736 m
338.3252 143.4736 L
333.3545 143.4736 329.3252 147.5029 329.3252 152.4736 C
329.3252 207.3311 L
329.3252 212.3018 333.3545 216.3311 338.3252 216.3311 C
402.3506 216.3311 L
407.3213 216.3311 411.3506 212.3018 411.3506 207.3311 C
411.3506 152.4736 L
411.3506 147.5029 407.3213 143.4736 402.3506 143.4736 C
f
451.3379 37.25 m
395.3379 37.25 L
390.3672 37.25 386.3379 41.2793 386.3379 46.25 C
386.3379 85.7549 L
386.3379 90.7256 390.3672 94.7549 395.3379 94.7549 C
451.3379 94.7549 L
456.3086 94.7549 460.3379 90.7256 460.3379 85.7549 C
460.3379 46.25 L
460.3379 41.2793 456.3086 37.25 451.3379 37.25 C
f
1 D
0.462135 0.006287 1 0.000031 0.596078 0.784314 0.035294 Xa
407.0996 109.7549 m
427.8203 109.7549 L
426.6768 113.6006 419.2617 124.3828 416.7656 128.4736 C
395.9912 128.4736 L
397.2578 124.5078 404.5342 113.96 407.0996 109.7549 C
f
333.5762 109.7549 m
336.1416 113.96 343.418 124.5078 344.6846 128.4736 C
323.9102 128.4736 L
321.4141 124.3818 314 113.6025 312.8555 109.7549 C
333.5762 109.7549 L
f
0 D
0.597284 0.512352 0.507713 0.201328 0.4 0.4 0.4 Xa
345.3379 37.25 m
289.3379 37.25 L
284.3672 37.25 280.3379 41.2793 280.3379 46.25 C
280.3379 85.7549 L
280.3379 90.7256 284.3672 94.7549 289.3379 94.7549 C
345.3379 94.7549 L
350.3086 94.7549 354.3379 90.7256 354.3379 85.7549 C
354.3379 46.25 L
354.3379 41.2793 350.3086 37.25 345.3379 37.25 C
f
415.3867 291.8223 m
415.3867 286.8516 411.3574 282.8223 406.3867 282.8223 C
390.6328 282.8223 L
390.8398 289.1123 390.6445 295.7568 390.6445 302.0859 C
390.6445 311.9512 375.6445 311.9512 375.6445 302.0859 C
375.6445 283.0537 L
375.6445 282.627 332.3271 282.8223 328.1182 282.8223 C
328.1201 282.8994 328.1299 282.9756 328.1299 283.0537 C
328.1299 302.0859 L
328.1299 311.9512 313.1299 311.9512 313.1299 302.0859 C
313.1299 283.0537 L
313.1299 282.6104 298.9521 282.8223 297.3867 282.8223 C
292.416 282.8223 288.3867 286.8516 288.3867 291.8223 C
288.3867 332.5586 316.873 365.7002 351.8867 365.7002 C
386.9004 365.7002 415.3867 332.5586 415.3867 291.8223 C
f
1 D
390.9297 415.6104 m
390.9297 437.1743 373.4512 454.6538 351.8867 454.6538 C
330.3252 454.6538 312.8447 437.1753 312.8447 415.6104 C
312.8447 394.0498 330.3252 376.5693 351.8867 376.5693 C
373.4492 376.5693 390.9297 394.0498 390.9297 415.6104 C
f
0.462135 0.006287 1 0.000031 0.596078 0.784314 0.035294 Xa
412.9277 384.2539 m
424.1758 389.832 431.2891 401.2695 431.2891 413.8301 C
431.2891 432.0562 416.5156 446.8296 398.2891 446.8296 C
397.5352 446.8296 396.7891 446.7954 396.0469 446.7456 C
402.2646 437.9424 405.9297 427.208 405.9297 415.6094 C
405.9297 398.0635 397.5605 382.4766 384.6016 372.6055 C
409.6328 359.6758 425.2432 334.1113 429.2871 306.6191 C
443.2891 306.6191 L
448.2598 306.6191 452.2891 310.6484 452.2891 315.6191 C
452.2891 348.3525 433.3623 375.1465 412.9277 384.2539 C
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
